# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RefineryModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alternate_ref_id': 'int',
        'ref_id': 'int',
        'name': 'str',
        'is_special_case': 'bool',
        'units': 'list[UnitModel]',
        'created_on': 'datetime',
        'created_by': 'str',
        'modified_on': 'datetime',
        'modified_by': 'str',
        'city': 'str',
        'country': 'str',
        'county': 'str',
        'is_enabled': 'bool',
        'is_aggregate': 'bool',
        'use_in_standard_mode': 'bool',
        'latitude': 'float',
        'longitude': 'float',
        'owner_name': 'str',
        'plant_name': 'str',
        'parent_name': 'str',
        'operator': 'str',
        'market_segment': 'str',
        'state_or_province': 'str',
        'pad_district': 'str',
        'region': 'str'
    }

    attribute_map = {
        'alternate_ref_id': 'alternateRefId',
        'ref_id': 'refId',
        'name': 'name',
        'is_special_case': 'isSpecialCase',
        'units': 'units',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'modified_on': 'modifiedOn',
        'modified_by': 'modifiedBy',
        'city': 'city',
        'country': 'country',
        'county': 'county',
        'is_enabled': 'isEnabled',
        'is_aggregate': 'isAggregate',
        'use_in_standard_mode': 'useInStandardMode',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'owner_name': 'ownerName',
        'plant_name': 'plantName',
        'parent_name': 'parentName',
        'operator': 'operator',
        'market_segment': 'marketSegment',
        'state_or_province': 'stateOrProvince',
        'pad_district': 'padDistrict',
        'region': 'region'
    }

    def __init__(self, alternate_ref_id=None, ref_id=None, name=None, is_special_case=None, units=None, created_on=None, created_by=None, modified_on=None, modified_by=None, city=None, country=None, county=None, is_enabled=None, is_aggregate=None, use_in_standard_mode=None, latitude=None, longitude=None, owner_name=None, plant_name=None, parent_name=None, operator=None, market_segment=None, state_or_province=None, pad_district=None, region=None):  # noqa: E501
        """RefineryModel - a model defined in Swagger"""  # noqa: E501
        self._alternate_ref_id = None
        self._ref_id = None
        self._name = None
        self._is_special_case = None
        self._units = None
        self._created_on = None
        self._created_by = None
        self._modified_on = None
        self._modified_by = None
        self._city = None
        self._country = None
        self._county = None
        self._is_enabled = None
        self._is_aggregate = None
        self._use_in_standard_mode = None
        self._latitude = None
        self._longitude = None
        self._owner_name = None
        self._plant_name = None
        self._parent_name = None
        self._operator = None
        self._market_segment = None
        self._state_or_province = None
        self._pad_district = None
        self._region = None
        self.discriminator = None
        if alternate_ref_id is not None:
            self.alternate_ref_id = alternate_ref_id
        if ref_id is not None:
            self.ref_id = ref_id
        if name is not None:
            self.name = name
        if is_special_case is not None:
            self.is_special_case = is_special_case
        if units is not None:
            self.units = units
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if modified_on is not None:
            self.modified_on = modified_on
        if modified_by is not None:
            self.modified_by = modified_by
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if county is not None:
            self.county = county
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_aggregate is not None:
            self.is_aggregate = is_aggregate
        if use_in_standard_mode is not None:
            self.use_in_standard_mode = use_in_standard_mode
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if owner_name is not None:
            self.owner_name = owner_name
        if plant_name is not None:
            self.plant_name = plant_name
        if parent_name is not None:
            self.parent_name = parent_name
        if operator is not None:
            self.operator = operator
        if market_segment is not None:
            self.market_segment = market_segment
        if state_or_province is not None:
            self.state_or_province = state_or_province
        if pad_district is not None:
            self.pad_district = pad_district
        if region is not None:
            self.region = region

    @property
    def alternate_ref_id(self):
        """Gets the alternate_ref_id of this RefineryModel.  # noqa: E501


        :return: The alternate_ref_id of this RefineryModel.  # noqa: E501
        :rtype: int
        """
        return self._alternate_ref_id

    @alternate_ref_id.setter
    def alternate_ref_id(self, alternate_ref_id):
        """Sets the alternate_ref_id of this RefineryModel.


        :param alternate_ref_id: The alternate_ref_id of this RefineryModel.  # noqa: E501
        :type: int
        """

        self._alternate_ref_id = alternate_ref_id

    @property
    def ref_id(self):
        """Gets the ref_id of this RefineryModel.  # noqa: E501


        :return: The ref_id of this RefineryModel.  # noqa: E501
        :rtype: int
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this RefineryModel.


        :param ref_id: The ref_id of this RefineryModel.  # noqa: E501
        :type: int
        """

        self._ref_id = ref_id

    @property
    def name(self):
        """Gets the name of this RefineryModel.  # noqa: E501


        :return: The name of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RefineryModel.


        :param name: The name of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_special_case(self):
        """Gets the is_special_case of this RefineryModel.  # noqa: E501


        :return: The is_special_case of this RefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_special_case

    @is_special_case.setter
    def is_special_case(self, is_special_case):
        """Sets the is_special_case of this RefineryModel.


        :param is_special_case: The is_special_case of this RefineryModel.  # noqa: E501
        :type: bool
        """

        self._is_special_case = is_special_case

    @property
    def units(self):
        """Gets the units of this RefineryModel.  # noqa: E501


        :return: The units of this RefineryModel.  # noqa: E501
        :rtype: list[UnitModel]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this RefineryModel.


        :param units: The units of this RefineryModel.  # noqa: E501
        :type: list[UnitModel]
        """

        self._units = units

    @property
    def created_on(self):
        """Gets the created_on of this RefineryModel.  # noqa: E501


        :return: The created_on of this RefineryModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this RefineryModel.


        :param created_on: The created_on of this RefineryModel.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this RefineryModel.  # noqa: E501


        :return: The created_by of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RefineryModel.


        :param created_by: The created_by of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_on(self):
        """Gets the modified_on of this RefineryModel.  # noqa: E501


        :return: The modified_on of this RefineryModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this RefineryModel.


        :param modified_on: The modified_on of this RefineryModel.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def modified_by(self):
        """Gets the modified_by of this RefineryModel.  # noqa: E501


        :return: The modified_by of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this RefineryModel.


        :param modified_by: The modified_by of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def city(self):
        """Gets the city of this RefineryModel.  # noqa: E501


        :return: The city of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this RefineryModel.


        :param city: The city of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this RefineryModel.  # noqa: E501


        :return: The country of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RefineryModel.


        :param country: The country of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this RefineryModel.  # noqa: E501


        :return: The county of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this RefineryModel.


        :param county: The county of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def is_enabled(self):
        """Gets the is_enabled of this RefineryModel.  # noqa: E501


        :return: The is_enabled of this RefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this RefineryModel.


        :param is_enabled: The is_enabled of this RefineryModel.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_aggregate(self):
        """Gets the is_aggregate of this RefineryModel.  # noqa: E501


        :return: The is_aggregate of this RefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_aggregate

    @is_aggregate.setter
    def is_aggregate(self, is_aggregate):
        """Sets the is_aggregate of this RefineryModel.


        :param is_aggregate: The is_aggregate of this RefineryModel.  # noqa: E501
        :type: bool
        """

        self._is_aggregate = is_aggregate

    @property
    def use_in_standard_mode(self):
        """Gets the use_in_standard_mode of this RefineryModel.  # noqa: E501


        :return: The use_in_standard_mode of this RefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_in_standard_mode

    @use_in_standard_mode.setter
    def use_in_standard_mode(self, use_in_standard_mode):
        """Sets the use_in_standard_mode of this RefineryModel.


        :param use_in_standard_mode: The use_in_standard_mode of this RefineryModel.  # noqa: E501
        :type: bool
        """

        self._use_in_standard_mode = use_in_standard_mode

    @property
    def latitude(self):
        """Gets the latitude of this RefineryModel.  # noqa: E501


        :return: The latitude of this RefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this RefineryModel.


        :param latitude: The latitude of this RefineryModel.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this RefineryModel.  # noqa: E501


        :return: The longitude of this RefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this RefineryModel.


        :param longitude: The longitude of this RefineryModel.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def owner_name(self):
        """Gets the owner_name of this RefineryModel.  # noqa: E501


        :return: The owner_name of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this RefineryModel.


        :param owner_name: The owner_name of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def plant_name(self):
        """Gets the plant_name of this RefineryModel.  # noqa: E501


        :return: The plant_name of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._plant_name

    @plant_name.setter
    def plant_name(self, plant_name):
        """Sets the plant_name of this RefineryModel.


        :param plant_name: The plant_name of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._plant_name = plant_name

    @property
    def parent_name(self):
        """Gets the parent_name of this RefineryModel.  # noqa: E501


        :return: The parent_name of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this RefineryModel.


        :param parent_name: The parent_name of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._parent_name = parent_name

    @property
    def operator(self):
        """Gets the operator of this RefineryModel.  # noqa: E501


        :return: The operator of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this RefineryModel.


        :param operator: The operator of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def market_segment(self):
        """Gets the market_segment of this RefineryModel.  # noqa: E501


        :return: The market_segment of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._market_segment

    @market_segment.setter
    def market_segment(self, market_segment):
        """Sets the market_segment of this RefineryModel.


        :param market_segment: The market_segment of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._market_segment = market_segment

    @property
    def state_or_province(self):
        """Gets the state_or_province of this RefineryModel.  # noqa: E501


        :return: The state_or_province of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this RefineryModel.


        :param state_or_province: The state_or_province of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._state_or_province = state_or_province

    @property
    def pad_district(self):
        """Gets the pad_district of this RefineryModel.  # noqa: E501


        :return: The pad_district of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._pad_district

    @pad_district.setter
    def pad_district(self, pad_district):
        """Sets the pad_district of this RefineryModel.


        :param pad_district: The pad_district of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._pad_district = pad_district

    @property
    def region(self):
        """Gets the region of this RefineryModel.  # noqa: E501


        :return: The region of this RefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RefineryModel.


        :param region: The region of this RefineryModel.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefineryModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefineryModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
