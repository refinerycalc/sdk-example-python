# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimulationScheduleModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_id': 'int',
        'simulation_name': 'str',
        'simulation_id': 'str',
        'frequency': 'str',
        'status': 'str',
        'next_run_time': 'datetime',
        'created_on': 'datetime',
        'last_run': 'SimulationScheduleRunModel'
    }

    attribute_map = {
        'schedule_id': 'scheduleId',
        'simulation_name': 'simulationName',
        'simulation_id': 'simulationId',
        'frequency': 'frequency',
        'status': 'status',
        'next_run_time': 'nextRunTime',
        'created_on': 'createdOn',
        'last_run': 'lastRun'
    }

    def __init__(self, schedule_id=None, simulation_name=None, simulation_id=None, frequency=None, status=None, next_run_time=None, created_on=None, last_run=None):  # noqa: E501
        """SimulationScheduleModel - a model defined in Swagger"""  # noqa: E501
        self._schedule_id = None
        self._simulation_name = None
        self._simulation_id = None
        self._frequency = None
        self._status = None
        self._next_run_time = None
        self._created_on = None
        self._last_run = None
        self.discriminator = None
        if schedule_id is not None:
            self.schedule_id = schedule_id
        if simulation_name is not None:
            self.simulation_name = simulation_name
        if simulation_id is not None:
            self.simulation_id = simulation_id
        if frequency is not None:
            self.frequency = frequency
        if status is not None:
            self.status = status
        if next_run_time is not None:
            self.next_run_time = next_run_time
        if created_on is not None:
            self.created_on = created_on
        if last_run is not None:
            self.last_run = last_run

    @property
    def schedule_id(self):
        """Gets the schedule_id of this SimulationScheduleModel.  # noqa: E501


        :return: The schedule_id of this SimulationScheduleModel.  # noqa: E501
        :rtype: int
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this SimulationScheduleModel.


        :param schedule_id: The schedule_id of this SimulationScheduleModel.  # noqa: E501
        :type: int
        """

        self._schedule_id = schedule_id

    @property
    def simulation_name(self):
        """Gets the simulation_name of this SimulationScheduleModel.  # noqa: E501


        :return: The simulation_name of this SimulationScheduleModel.  # noqa: E501
        :rtype: str
        """
        return self._simulation_name

    @simulation_name.setter
    def simulation_name(self, simulation_name):
        """Sets the simulation_name of this SimulationScheduleModel.


        :param simulation_name: The simulation_name of this SimulationScheduleModel.  # noqa: E501
        :type: str
        """

        self._simulation_name = simulation_name

    @property
    def simulation_id(self):
        """Gets the simulation_id of this SimulationScheduleModel.  # noqa: E501


        :return: The simulation_id of this SimulationScheduleModel.  # noqa: E501
        :rtype: str
        """
        return self._simulation_id

    @simulation_id.setter
    def simulation_id(self, simulation_id):
        """Sets the simulation_id of this SimulationScheduleModel.


        :param simulation_id: The simulation_id of this SimulationScheduleModel.  # noqa: E501
        :type: str
        """

        self._simulation_id = simulation_id

    @property
    def frequency(self):
        """Gets the frequency of this SimulationScheduleModel.  # noqa: E501


        :return: The frequency of this SimulationScheduleModel.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this SimulationScheduleModel.


        :param frequency: The frequency of this SimulationScheduleModel.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def status(self):
        """Gets the status of this SimulationScheduleModel.  # noqa: E501


        :return: The status of this SimulationScheduleModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SimulationScheduleModel.


        :param status: The status of this SimulationScheduleModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def next_run_time(self):
        """Gets the next_run_time of this SimulationScheduleModel.  # noqa: E501


        :return: The next_run_time of this SimulationScheduleModel.  # noqa: E501
        :rtype: datetime
        """
        return self._next_run_time

    @next_run_time.setter
    def next_run_time(self, next_run_time):
        """Sets the next_run_time of this SimulationScheduleModel.


        :param next_run_time: The next_run_time of this SimulationScheduleModel.  # noqa: E501
        :type: datetime
        """

        self._next_run_time = next_run_time

    @property
    def created_on(self):
        """Gets the created_on of this SimulationScheduleModel.  # noqa: E501


        :return: The created_on of this SimulationScheduleModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this SimulationScheduleModel.


        :param created_on: The created_on of this SimulationScheduleModel.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def last_run(self):
        """Gets the last_run of this SimulationScheduleModel.  # noqa: E501


        :return: The last_run of this SimulationScheduleModel.  # noqa: E501
        :rtype: SimulationScheduleRunModel
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this SimulationScheduleModel.


        :param last_run: The last_run of this SimulationScheduleModel.  # noqa: E501
        :type: SimulationScheduleRunModel
        """

        self._last_run = last_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimulationScheduleModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimulationScheduleModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
