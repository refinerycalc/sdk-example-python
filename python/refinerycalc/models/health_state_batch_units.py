# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HealthStateBatchUnits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit_id': 'int',
        'apply_all': 'bool',
        'health_states': 'list[UnitHealthStateRequest]'
    }

    attribute_map = {
        'unit_id': 'unitId',
        'apply_all': 'applyAll',
        'health_states': 'healthStates'
    }

    def __init__(self, unit_id=None, apply_all=None, health_states=None):  # noqa: E501
        """HealthStateBatchUnits - a model defined in Swagger"""  # noqa: E501
        self._unit_id = None
        self._apply_all = None
        self._health_states = None
        self.discriminator = None
        if unit_id is not None:
            self.unit_id = unit_id
        if apply_all is not None:
            self.apply_all = apply_all
        if health_states is not None:
            self.health_states = health_states

    @property
    def unit_id(self):
        """Gets the unit_id of this HealthStateBatchUnits.  # noqa: E501


        :return: The unit_id of this HealthStateBatchUnits.  # noqa: E501
        :rtype: int
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """Sets the unit_id of this HealthStateBatchUnits.


        :param unit_id: The unit_id of this HealthStateBatchUnits.  # noqa: E501
        :type: int
        """

        self._unit_id = unit_id

    @property
    def apply_all(self):
        """Gets the apply_all of this HealthStateBatchUnits.  # noqa: E501


        :return: The apply_all of this HealthStateBatchUnits.  # noqa: E501
        :rtype: bool
        """
        return self._apply_all

    @apply_all.setter
    def apply_all(self, apply_all):
        """Sets the apply_all of this HealthStateBatchUnits.


        :param apply_all: The apply_all of this HealthStateBatchUnits.  # noqa: E501
        :type: bool
        """

        self._apply_all = apply_all

    @property
    def health_states(self):
        """Gets the health_states of this HealthStateBatchUnits.  # noqa: E501


        :return: The health_states of this HealthStateBatchUnits.  # noqa: E501
        :rtype: list[UnitHealthStateRequest]
        """
        return self._health_states

    @health_states.setter
    def health_states(self, health_states):
        """Sets the health_states of this HealthStateBatchUnits.


        :param health_states: The health_states of this HealthStateBatchUnits.  # noqa: E501
        :type: list[UnitHealthStateRequest]
        """

        self._health_states = health_states

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthStateBatchUnits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthStateBatchUnits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
