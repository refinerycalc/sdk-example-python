# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeseriesCrudes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crude1': 'TimeseriesCrudeReference',
        'crude2': 'TimeseriesCrudeReference',
        'crude3': 'TimeseriesCrudeReference',
        'crude4': 'TimeseriesCrudeReference',
        'crude5': 'TimeseriesCrudeReference'
    }

    attribute_map = {
        'crude1': 'crude1',
        'crude2': 'crude2',
        'crude3': 'crude3',
        'crude4': 'crude4',
        'crude5': 'crude5'
    }

    def __init__(self, crude1=None, crude2=None, crude3=None, crude4=None, crude5=None):  # noqa: E501
        """TimeseriesCrudes - a model defined in Swagger"""  # noqa: E501
        self._crude1 = None
        self._crude2 = None
        self._crude3 = None
        self._crude4 = None
        self._crude5 = None
        self.discriminator = None
        if crude1 is not None:
            self.crude1 = crude1
        if crude2 is not None:
            self.crude2 = crude2
        if crude3 is not None:
            self.crude3 = crude3
        if crude4 is not None:
            self.crude4 = crude4
        if crude5 is not None:
            self.crude5 = crude5

    @property
    def crude1(self):
        """Gets the crude1 of this TimeseriesCrudes.  # noqa: E501


        :return: The crude1 of this TimeseriesCrudes.  # noqa: E501
        :rtype: TimeseriesCrudeReference
        """
        return self._crude1

    @crude1.setter
    def crude1(self, crude1):
        """Sets the crude1 of this TimeseriesCrudes.


        :param crude1: The crude1 of this TimeseriesCrudes.  # noqa: E501
        :type: TimeseriesCrudeReference
        """

        self._crude1 = crude1

    @property
    def crude2(self):
        """Gets the crude2 of this TimeseriesCrudes.  # noqa: E501


        :return: The crude2 of this TimeseriesCrudes.  # noqa: E501
        :rtype: TimeseriesCrudeReference
        """
        return self._crude2

    @crude2.setter
    def crude2(self, crude2):
        """Sets the crude2 of this TimeseriesCrudes.


        :param crude2: The crude2 of this TimeseriesCrudes.  # noqa: E501
        :type: TimeseriesCrudeReference
        """

        self._crude2 = crude2

    @property
    def crude3(self):
        """Gets the crude3 of this TimeseriesCrudes.  # noqa: E501


        :return: The crude3 of this TimeseriesCrudes.  # noqa: E501
        :rtype: TimeseriesCrudeReference
        """
        return self._crude3

    @crude3.setter
    def crude3(self, crude3):
        """Sets the crude3 of this TimeseriesCrudes.


        :param crude3: The crude3 of this TimeseriesCrudes.  # noqa: E501
        :type: TimeseriesCrudeReference
        """

        self._crude3 = crude3

    @property
    def crude4(self):
        """Gets the crude4 of this TimeseriesCrudes.  # noqa: E501


        :return: The crude4 of this TimeseriesCrudes.  # noqa: E501
        :rtype: TimeseriesCrudeReference
        """
        return self._crude4

    @crude4.setter
    def crude4(self, crude4):
        """Sets the crude4 of this TimeseriesCrudes.


        :param crude4: The crude4 of this TimeseriesCrudes.  # noqa: E501
        :type: TimeseriesCrudeReference
        """

        self._crude4 = crude4

    @property
    def crude5(self):
        """Gets the crude5 of this TimeseriesCrudes.  # noqa: E501


        :return: The crude5 of this TimeseriesCrudes.  # noqa: E501
        :rtype: TimeseriesCrudeReference
        """
        return self._crude5

    @crude5.setter
    def crude5(self, crude5):
        """Sets the crude5 of this TimeseriesCrudes.


        :param crude5: The crude5 of this TimeseriesCrudes.  # noqa: E501
        :type: TimeseriesCrudeReference
        """

        self._crude5 = crude5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeseriesCrudes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeseriesCrudes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
