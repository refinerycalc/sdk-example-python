# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RefineryCrudeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'refinery_id': 'int',
        'crude_id': 'int',
        'allocation_value': 'float',
        'crude_no': 'int',
        'name': 'str',
        'api': 'float',
        'sulphur': 'float',
        'price': 'float',
        'freight': 'float',
        'is_available': 'bool',
        'crude_type': 'CrudeType',
        'price_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'refinery_id': 'refineryId',
        'crude_id': 'crudeId',
        'allocation_value': 'allocationValue',
        'crude_no': 'crudeNo',
        'name': 'name',
        'api': 'api',
        'sulphur': 'sulphur',
        'price': 'price',
        'freight': 'freight',
        'is_available': 'isAvailable',
        'crude_type': 'crudeType',
        'price_date': 'priceDate'
    }

    def __init__(self, id=None, refinery_id=None, crude_id=None, allocation_value=None, crude_no=None, name=None, api=None, sulphur=None, price=None, freight=None, is_available=None, crude_type=None, price_date=None):  # noqa: E501
        """RefineryCrudeModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._refinery_id = None
        self._crude_id = None
        self._allocation_value = None
        self._crude_no = None
        self._name = None
        self._api = None
        self._sulphur = None
        self._price = None
        self._freight = None
        self._is_available = None
        self._crude_type = None
        self._price_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if refinery_id is not None:
            self.refinery_id = refinery_id
        if crude_id is not None:
            self.crude_id = crude_id
        if allocation_value is not None:
            self.allocation_value = allocation_value
        if crude_no is not None:
            self.crude_no = crude_no
        if name is not None:
            self.name = name
        if api is not None:
            self.api = api
        if sulphur is not None:
            self.sulphur = sulphur
        if price is not None:
            self.price = price
        if freight is not None:
            self.freight = freight
        if is_available is not None:
            self.is_available = is_available
        if crude_type is not None:
            self.crude_type = crude_type
        if price_date is not None:
            self.price_date = price_date

    @property
    def id(self):
        """Gets the id of this RefineryCrudeModel.  # noqa: E501


        :return: The id of this RefineryCrudeModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RefineryCrudeModel.


        :param id: The id of this RefineryCrudeModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def refinery_id(self):
        """Gets the refinery_id of this RefineryCrudeModel.  # noqa: E501


        :return: The refinery_id of this RefineryCrudeModel.  # noqa: E501
        :rtype: int
        """
        return self._refinery_id

    @refinery_id.setter
    def refinery_id(self, refinery_id):
        """Sets the refinery_id of this RefineryCrudeModel.


        :param refinery_id: The refinery_id of this RefineryCrudeModel.  # noqa: E501
        :type: int
        """

        self._refinery_id = refinery_id

    @property
    def crude_id(self):
        """Gets the crude_id of this RefineryCrudeModel.  # noqa: E501


        :return: The crude_id of this RefineryCrudeModel.  # noqa: E501
        :rtype: int
        """
        return self._crude_id

    @crude_id.setter
    def crude_id(self, crude_id):
        """Sets the crude_id of this RefineryCrudeModel.


        :param crude_id: The crude_id of this RefineryCrudeModel.  # noqa: E501
        :type: int
        """

        self._crude_id = crude_id

    @property
    def allocation_value(self):
        """Gets the allocation_value of this RefineryCrudeModel.  # noqa: E501


        :return: The allocation_value of this RefineryCrudeModel.  # noqa: E501
        :rtype: float
        """
        return self._allocation_value

    @allocation_value.setter
    def allocation_value(self, allocation_value):
        """Sets the allocation_value of this RefineryCrudeModel.


        :param allocation_value: The allocation_value of this RefineryCrudeModel.  # noqa: E501
        :type: float
        """

        self._allocation_value = allocation_value

    @property
    def crude_no(self):
        """Gets the crude_no of this RefineryCrudeModel.  # noqa: E501


        :return: The crude_no of this RefineryCrudeModel.  # noqa: E501
        :rtype: int
        """
        return self._crude_no

    @crude_no.setter
    def crude_no(self, crude_no):
        """Sets the crude_no of this RefineryCrudeModel.


        :param crude_no: The crude_no of this RefineryCrudeModel.  # noqa: E501
        :type: int
        """

        self._crude_no = crude_no

    @property
    def name(self):
        """Gets the name of this RefineryCrudeModel.  # noqa: E501


        :return: The name of this RefineryCrudeModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RefineryCrudeModel.


        :param name: The name of this RefineryCrudeModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def api(self):
        """Gets the api of this RefineryCrudeModel.  # noqa: E501


        :return: The api of this RefineryCrudeModel.  # noqa: E501
        :rtype: float
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this RefineryCrudeModel.


        :param api: The api of this RefineryCrudeModel.  # noqa: E501
        :type: float
        """

        self._api = api

    @property
    def sulphur(self):
        """Gets the sulphur of this RefineryCrudeModel.  # noqa: E501


        :return: The sulphur of this RefineryCrudeModel.  # noqa: E501
        :rtype: float
        """
        return self._sulphur

    @sulphur.setter
    def sulphur(self, sulphur):
        """Sets the sulphur of this RefineryCrudeModel.


        :param sulphur: The sulphur of this RefineryCrudeModel.  # noqa: E501
        :type: float
        """

        self._sulphur = sulphur

    @property
    def price(self):
        """Gets the price of this RefineryCrudeModel.  # noqa: E501


        :return: The price of this RefineryCrudeModel.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RefineryCrudeModel.


        :param price: The price of this RefineryCrudeModel.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def freight(self):
        """Gets the freight of this RefineryCrudeModel.  # noqa: E501


        :return: The freight of this RefineryCrudeModel.  # noqa: E501
        :rtype: float
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """Sets the freight of this RefineryCrudeModel.


        :param freight: The freight of this RefineryCrudeModel.  # noqa: E501
        :type: float
        """

        self._freight = freight

    @property
    def is_available(self):
        """Gets the is_available of this RefineryCrudeModel.  # noqa: E501


        :return: The is_available of this RefineryCrudeModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this RefineryCrudeModel.


        :param is_available: The is_available of this RefineryCrudeModel.  # noqa: E501
        :type: bool
        """

        self._is_available = is_available

    @property
    def crude_type(self):
        """Gets the crude_type of this RefineryCrudeModel.  # noqa: E501


        :return: The crude_type of this RefineryCrudeModel.  # noqa: E501
        :rtype: CrudeType
        """
        return self._crude_type

    @crude_type.setter
    def crude_type(self, crude_type):
        """Sets the crude_type of this RefineryCrudeModel.


        :param crude_type: The crude_type of this RefineryCrudeModel.  # noqa: E501
        :type: CrudeType
        """

        self._crude_type = crude_type

    @property
    def price_date(self):
        """Gets the price_date of this RefineryCrudeModel.  # noqa: E501


        :return: The price_date of this RefineryCrudeModel.  # noqa: E501
        :rtype: datetime
        """
        return self._price_date

    @price_date.setter
    def price_date(self, price_date):
        """Sets the price_date of this RefineryCrudeModel.


        :param price_date: The price_date of this RefineryCrudeModel.  # noqa: E501
        :type: datetime
        """

        self._price_date = price_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefineryCrudeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefineryCrudeModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
