# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalculatorRefineryModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crudes_graph': 'GraphModel',
        'constraints_graph': 'GraphModel',
        'hydrogen_graph': 'GraphModel',
        'crude_composition_graph': 'GraphModel',
        'products_graph': 'GraphModel',
        'id': 'int',
        'name': 'str',
        'guid': 'str',
        'notes': 'str',
        'is_engine_mode': 'bool',
        'is_time_series': 'bool',
        'has_time_series_file': 'bool',
        'crude_mode': 'CrudeMode',
        'end_point_mode': 'EndPointMode',
        'intermediate_product': 'str',
        'kero_mode': 'KeroOptimizationMode',
        'kero_fix_volume': 'float',
        'is_user_default': 'bool',
        'excel_output': 'str',
        'pdf_output': 'str',
        'calculator': 'CalculatorModel',
        'refinery': 'RefineryModel',
        'units': 'list[UnitModel]',
        'crudes': 'list[CrudeModel]',
        'all_crudes': 'list[CrudeModel]',
        'light_crudes': 'list[CrudeModel]',
        'intermediate_crudes': 'list[CrudeModel]',
        'heavy_crudes': 'list[CrudeModel]',
        'product_prices': 'list[ProductPriceModel]',
        'end_points': 'list[EndPointModel]',
        'is_template': 'bool',
        'outputs': 'list[CalculatorRefineryOutputModel]',
        'product_price_unit_type': 'str',
        'apply_all_crude_composition': 'bool',
        'use_design_mode': 'bool',
        'is_iir_refinery': 'bool',
        'carbon_penalty': 'float',
        'reid_vapor_pressure': 'float',
        'blue_hydrogen_percent': 'float',
        'blue_hydrogen_price': 'float',
        'green_hydrogen_percent': 'float',
        'green_hydrogen_price': 'float',
        'grey_hydrogen_percent': 'float',
        'grey_hydrogen_price': 'float',
        'purchase_vgo': 'float',
        'message': 'str',
        'success': 'bool'
    }

    attribute_map = {
        'crudes_graph': 'crudesGraph',
        'constraints_graph': 'constraintsGraph',
        'hydrogen_graph': 'hydrogenGraph',
        'crude_composition_graph': 'crudeCompositionGraph',
        'products_graph': 'productsGraph',
        'id': 'id',
        'name': 'name',
        'guid': 'guid',
        'notes': 'notes',
        'is_engine_mode': 'isEngineMode',
        'is_time_series': 'isTimeSeries',
        'has_time_series_file': 'hasTimeSeriesFile',
        'crude_mode': 'crudeMode',
        'end_point_mode': 'endPointMode',
        'intermediate_product': 'intermediateProduct',
        'kero_mode': 'keroMode',
        'kero_fix_volume': 'keroFixVolume',
        'is_user_default': 'isUserDefault',
        'excel_output': 'excelOutput',
        'pdf_output': 'pdfOutput',
        'calculator': 'calculator',
        'refinery': 'refinery',
        'units': 'units',
        'crudes': 'crudes',
        'all_crudes': 'allCrudes',
        'light_crudes': 'lightCrudes',
        'intermediate_crudes': 'intermediateCrudes',
        'heavy_crudes': 'heavyCrudes',
        'product_prices': 'productPrices',
        'end_points': 'endPoints',
        'is_template': 'isTemplate',
        'outputs': 'outputs',
        'product_price_unit_type': 'productPriceUnitType',
        'apply_all_crude_composition': 'applyAllCrudeComposition',
        'use_design_mode': 'useDesignMode',
        'is_iir_refinery': 'isIirRefinery',
        'carbon_penalty': 'carbonPenalty',
        'reid_vapor_pressure': 'reidVaporPressure',
        'blue_hydrogen_percent': 'blueHydrogenPercent',
        'blue_hydrogen_price': 'blueHydrogenPrice',
        'green_hydrogen_percent': 'greenHydrogenPercent',
        'green_hydrogen_price': 'greenHydrogenPrice',
        'grey_hydrogen_percent': 'greyHydrogenPercent',
        'grey_hydrogen_price': 'greyHydrogenPrice',
        'purchase_vgo': 'purchaseVgo',
        'message': 'message',
        'success': 'success'
    }

    def __init__(self, crudes_graph=None, constraints_graph=None, hydrogen_graph=None, crude_composition_graph=None, products_graph=None, id=None, name=None, guid=None, notes=None, is_engine_mode=None, is_time_series=None, has_time_series_file=None, crude_mode=None, end_point_mode=None, intermediate_product=None, kero_mode=None, kero_fix_volume=None, is_user_default=None, excel_output=None, pdf_output=None, calculator=None, refinery=None, units=None, crudes=None, all_crudes=None, light_crudes=None, intermediate_crudes=None, heavy_crudes=None, product_prices=None, end_points=None, is_template=None, outputs=None, product_price_unit_type=None, apply_all_crude_composition=None, use_design_mode=None, is_iir_refinery=None, carbon_penalty=None, reid_vapor_pressure=None, blue_hydrogen_percent=None, blue_hydrogen_price=None, green_hydrogen_percent=None, green_hydrogen_price=None, grey_hydrogen_percent=None, grey_hydrogen_price=None, purchase_vgo=None, message=None, success=None):  # noqa: E501
        """CalculatorRefineryModel - a model defined in Swagger"""  # noqa: E501
        self._crudes_graph = None
        self._constraints_graph = None
        self._hydrogen_graph = None
        self._crude_composition_graph = None
        self._products_graph = None
        self._id = None
        self._name = None
        self._guid = None
        self._notes = None
        self._is_engine_mode = None
        self._is_time_series = None
        self._has_time_series_file = None
        self._crude_mode = None
        self._end_point_mode = None
        self._intermediate_product = None
        self._kero_mode = None
        self._kero_fix_volume = None
        self._is_user_default = None
        self._excel_output = None
        self._pdf_output = None
        self._calculator = None
        self._refinery = None
        self._units = None
        self._crudes = None
        self._all_crudes = None
        self._light_crudes = None
        self._intermediate_crudes = None
        self._heavy_crudes = None
        self._product_prices = None
        self._end_points = None
        self._is_template = None
        self._outputs = None
        self._product_price_unit_type = None
        self._apply_all_crude_composition = None
        self._use_design_mode = None
        self._is_iir_refinery = None
        self._carbon_penalty = None
        self._reid_vapor_pressure = None
        self._blue_hydrogen_percent = None
        self._blue_hydrogen_price = None
        self._green_hydrogen_percent = None
        self._green_hydrogen_price = None
        self._grey_hydrogen_percent = None
        self._grey_hydrogen_price = None
        self._purchase_vgo = None
        self._message = None
        self._success = None
        self.discriminator = None
        if crudes_graph is not None:
            self.crudes_graph = crudes_graph
        if constraints_graph is not None:
            self.constraints_graph = constraints_graph
        if hydrogen_graph is not None:
            self.hydrogen_graph = hydrogen_graph
        if crude_composition_graph is not None:
            self.crude_composition_graph = crude_composition_graph
        if products_graph is not None:
            self.products_graph = products_graph
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if guid is not None:
            self.guid = guid
        if notes is not None:
            self.notes = notes
        if is_engine_mode is not None:
            self.is_engine_mode = is_engine_mode
        if is_time_series is not None:
            self.is_time_series = is_time_series
        if has_time_series_file is not None:
            self.has_time_series_file = has_time_series_file
        if crude_mode is not None:
            self.crude_mode = crude_mode
        if end_point_mode is not None:
            self.end_point_mode = end_point_mode
        if intermediate_product is not None:
            self.intermediate_product = intermediate_product
        if kero_mode is not None:
            self.kero_mode = kero_mode
        if kero_fix_volume is not None:
            self.kero_fix_volume = kero_fix_volume
        if is_user_default is not None:
            self.is_user_default = is_user_default
        if excel_output is not None:
            self.excel_output = excel_output
        if pdf_output is not None:
            self.pdf_output = pdf_output
        if calculator is not None:
            self.calculator = calculator
        if refinery is not None:
            self.refinery = refinery
        if units is not None:
            self.units = units
        if crudes is not None:
            self.crudes = crudes
        if all_crudes is not None:
            self.all_crudes = all_crudes
        if light_crudes is not None:
            self.light_crudes = light_crudes
        if intermediate_crudes is not None:
            self.intermediate_crudes = intermediate_crudes
        if heavy_crudes is not None:
            self.heavy_crudes = heavy_crudes
        if product_prices is not None:
            self.product_prices = product_prices
        if end_points is not None:
            self.end_points = end_points
        if is_template is not None:
            self.is_template = is_template
        if outputs is not None:
            self.outputs = outputs
        if product_price_unit_type is not None:
            self.product_price_unit_type = product_price_unit_type
        if apply_all_crude_composition is not None:
            self.apply_all_crude_composition = apply_all_crude_composition
        if use_design_mode is not None:
            self.use_design_mode = use_design_mode
        if is_iir_refinery is not None:
            self.is_iir_refinery = is_iir_refinery
        if carbon_penalty is not None:
            self.carbon_penalty = carbon_penalty
        if reid_vapor_pressure is not None:
            self.reid_vapor_pressure = reid_vapor_pressure
        if blue_hydrogen_percent is not None:
            self.blue_hydrogen_percent = blue_hydrogen_percent
        if blue_hydrogen_price is not None:
            self.blue_hydrogen_price = blue_hydrogen_price
        if green_hydrogen_percent is not None:
            self.green_hydrogen_percent = green_hydrogen_percent
        if green_hydrogen_price is not None:
            self.green_hydrogen_price = green_hydrogen_price
        if grey_hydrogen_percent is not None:
            self.grey_hydrogen_percent = grey_hydrogen_percent
        if grey_hydrogen_price is not None:
            self.grey_hydrogen_price = grey_hydrogen_price
        if purchase_vgo is not None:
            self.purchase_vgo = purchase_vgo
        if message is not None:
            self.message = message
        if success is not None:
            self.success = success

    @property
    def crudes_graph(self):
        """Gets the crudes_graph of this CalculatorRefineryModel.  # noqa: E501


        :return: The crudes_graph of this CalculatorRefineryModel.  # noqa: E501
        :rtype: GraphModel
        """
        return self._crudes_graph

    @crudes_graph.setter
    def crudes_graph(self, crudes_graph):
        """Sets the crudes_graph of this CalculatorRefineryModel.


        :param crudes_graph: The crudes_graph of this CalculatorRefineryModel.  # noqa: E501
        :type: GraphModel
        """

        self._crudes_graph = crudes_graph

    @property
    def constraints_graph(self):
        """Gets the constraints_graph of this CalculatorRefineryModel.  # noqa: E501


        :return: The constraints_graph of this CalculatorRefineryModel.  # noqa: E501
        :rtype: GraphModel
        """
        return self._constraints_graph

    @constraints_graph.setter
    def constraints_graph(self, constraints_graph):
        """Sets the constraints_graph of this CalculatorRefineryModel.


        :param constraints_graph: The constraints_graph of this CalculatorRefineryModel.  # noqa: E501
        :type: GraphModel
        """

        self._constraints_graph = constraints_graph

    @property
    def hydrogen_graph(self):
        """Gets the hydrogen_graph of this CalculatorRefineryModel.  # noqa: E501


        :return: The hydrogen_graph of this CalculatorRefineryModel.  # noqa: E501
        :rtype: GraphModel
        """
        return self._hydrogen_graph

    @hydrogen_graph.setter
    def hydrogen_graph(self, hydrogen_graph):
        """Sets the hydrogen_graph of this CalculatorRefineryModel.


        :param hydrogen_graph: The hydrogen_graph of this CalculatorRefineryModel.  # noqa: E501
        :type: GraphModel
        """

        self._hydrogen_graph = hydrogen_graph

    @property
    def crude_composition_graph(self):
        """Gets the crude_composition_graph of this CalculatorRefineryModel.  # noqa: E501


        :return: The crude_composition_graph of this CalculatorRefineryModel.  # noqa: E501
        :rtype: GraphModel
        """
        return self._crude_composition_graph

    @crude_composition_graph.setter
    def crude_composition_graph(self, crude_composition_graph):
        """Sets the crude_composition_graph of this CalculatorRefineryModel.


        :param crude_composition_graph: The crude_composition_graph of this CalculatorRefineryModel.  # noqa: E501
        :type: GraphModel
        """

        self._crude_composition_graph = crude_composition_graph

    @property
    def products_graph(self):
        """Gets the products_graph of this CalculatorRefineryModel.  # noqa: E501


        :return: The products_graph of this CalculatorRefineryModel.  # noqa: E501
        :rtype: GraphModel
        """
        return self._products_graph

    @products_graph.setter
    def products_graph(self, products_graph):
        """Sets the products_graph of this CalculatorRefineryModel.


        :param products_graph: The products_graph of this CalculatorRefineryModel.  # noqa: E501
        :type: GraphModel
        """

        self._products_graph = products_graph

    @property
    def id(self):
        """Gets the id of this CalculatorRefineryModel.  # noqa: E501


        :return: The id of this CalculatorRefineryModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalculatorRefineryModel.


        :param id: The id of this CalculatorRefineryModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CalculatorRefineryModel.  # noqa: E501


        :return: The name of this CalculatorRefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalculatorRefineryModel.


        :param name: The name of this CalculatorRefineryModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def guid(self):
        """Gets the guid of this CalculatorRefineryModel.  # noqa: E501


        :return: The guid of this CalculatorRefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this CalculatorRefineryModel.


        :param guid: The guid of this CalculatorRefineryModel.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def notes(self):
        """Gets the notes of this CalculatorRefineryModel.  # noqa: E501


        :return: The notes of this CalculatorRefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CalculatorRefineryModel.


        :param notes: The notes of this CalculatorRefineryModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def is_engine_mode(self):
        """Gets the is_engine_mode of this CalculatorRefineryModel.  # noqa: E501


        :return: The is_engine_mode of this CalculatorRefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_engine_mode

    @is_engine_mode.setter
    def is_engine_mode(self, is_engine_mode):
        """Sets the is_engine_mode of this CalculatorRefineryModel.


        :param is_engine_mode: The is_engine_mode of this CalculatorRefineryModel.  # noqa: E501
        :type: bool
        """

        self._is_engine_mode = is_engine_mode

    @property
    def is_time_series(self):
        """Gets the is_time_series of this CalculatorRefineryModel.  # noqa: E501


        :return: The is_time_series of this CalculatorRefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_time_series

    @is_time_series.setter
    def is_time_series(self, is_time_series):
        """Sets the is_time_series of this CalculatorRefineryModel.


        :param is_time_series: The is_time_series of this CalculatorRefineryModel.  # noqa: E501
        :type: bool
        """

        self._is_time_series = is_time_series

    @property
    def has_time_series_file(self):
        """Gets the has_time_series_file of this CalculatorRefineryModel.  # noqa: E501


        :return: The has_time_series_file of this CalculatorRefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_time_series_file

    @has_time_series_file.setter
    def has_time_series_file(self, has_time_series_file):
        """Sets the has_time_series_file of this CalculatorRefineryModel.


        :param has_time_series_file: The has_time_series_file of this CalculatorRefineryModel.  # noqa: E501
        :type: bool
        """

        self._has_time_series_file = has_time_series_file

    @property
    def crude_mode(self):
        """Gets the crude_mode of this CalculatorRefineryModel.  # noqa: E501


        :return: The crude_mode of this CalculatorRefineryModel.  # noqa: E501
        :rtype: CrudeMode
        """
        return self._crude_mode

    @crude_mode.setter
    def crude_mode(self, crude_mode):
        """Sets the crude_mode of this CalculatorRefineryModel.


        :param crude_mode: The crude_mode of this CalculatorRefineryModel.  # noqa: E501
        :type: CrudeMode
        """

        self._crude_mode = crude_mode

    @property
    def end_point_mode(self):
        """Gets the end_point_mode of this CalculatorRefineryModel.  # noqa: E501


        :return: The end_point_mode of this CalculatorRefineryModel.  # noqa: E501
        :rtype: EndPointMode
        """
        return self._end_point_mode

    @end_point_mode.setter
    def end_point_mode(self, end_point_mode):
        """Sets the end_point_mode of this CalculatorRefineryModel.


        :param end_point_mode: The end_point_mode of this CalculatorRefineryModel.  # noqa: E501
        :type: EndPointMode
        """

        self._end_point_mode = end_point_mode

    @property
    def intermediate_product(self):
        """Gets the intermediate_product of this CalculatorRefineryModel.  # noqa: E501


        :return: The intermediate_product of this CalculatorRefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._intermediate_product

    @intermediate_product.setter
    def intermediate_product(self, intermediate_product):
        """Sets the intermediate_product of this CalculatorRefineryModel.


        :param intermediate_product: The intermediate_product of this CalculatorRefineryModel.  # noqa: E501
        :type: str
        """

        self._intermediate_product = intermediate_product

    @property
    def kero_mode(self):
        """Gets the kero_mode of this CalculatorRefineryModel.  # noqa: E501


        :return: The kero_mode of this CalculatorRefineryModel.  # noqa: E501
        :rtype: KeroOptimizationMode
        """
        return self._kero_mode

    @kero_mode.setter
    def kero_mode(self, kero_mode):
        """Sets the kero_mode of this CalculatorRefineryModel.


        :param kero_mode: The kero_mode of this CalculatorRefineryModel.  # noqa: E501
        :type: KeroOptimizationMode
        """

        self._kero_mode = kero_mode

    @property
    def kero_fix_volume(self):
        """Gets the kero_fix_volume of this CalculatorRefineryModel.  # noqa: E501


        :return: The kero_fix_volume of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._kero_fix_volume

    @kero_fix_volume.setter
    def kero_fix_volume(self, kero_fix_volume):
        """Sets the kero_fix_volume of this CalculatorRefineryModel.


        :param kero_fix_volume: The kero_fix_volume of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._kero_fix_volume = kero_fix_volume

    @property
    def is_user_default(self):
        """Gets the is_user_default of this CalculatorRefineryModel.  # noqa: E501


        :return: The is_user_default of this CalculatorRefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_user_default

    @is_user_default.setter
    def is_user_default(self, is_user_default):
        """Sets the is_user_default of this CalculatorRefineryModel.


        :param is_user_default: The is_user_default of this CalculatorRefineryModel.  # noqa: E501
        :type: bool
        """

        self._is_user_default = is_user_default

    @property
    def excel_output(self):
        """Gets the excel_output of this CalculatorRefineryModel.  # noqa: E501


        :return: The excel_output of this CalculatorRefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._excel_output

    @excel_output.setter
    def excel_output(self, excel_output):
        """Sets the excel_output of this CalculatorRefineryModel.


        :param excel_output: The excel_output of this CalculatorRefineryModel.  # noqa: E501
        :type: str
        """

        self._excel_output = excel_output

    @property
    def pdf_output(self):
        """Gets the pdf_output of this CalculatorRefineryModel.  # noqa: E501


        :return: The pdf_output of this CalculatorRefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._pdf_output

    @pdf_output.setter
    def pdf_output(self, pdf_output):
        """Sets the pdf_output of this CalculatorRefineryModel.


        :param pdf_output: The pdf_output of this CalculatorRefineryModel.  # noqa: E501
        :type: str
        """

        self._pdf_output = pdf_output

    @property
    def calculator(self):
        """Gets the calculator of this CalculatorRefineryModel.  # noqa: E501


        :return: The calculator of this CalculatorRefineryModel.  # noqa: E501
        :rtype: CalculatorModel
        """
        return self._calculator

    @calculator.setter
    def calculator(self, calculator):
        """Sets the calculator of this CalculatorRefineryModel.


        :param calculator: The calculator of this CalculatorRefineryModel.  # noqa: E501
        :type: CalculatorModel
        """

        self._calculator = calculator

    @property
    def refinery(self):
        """Gets the refinery of this CalculatorRefineryModel.  # noqa: E501


        :return: The refinery of this CalculatorRefineryModel.  # noqa: E501
        :rtype: RefineryModel
        """
        return self._refinery

    @refinery.setter
    def refinery(self, refinery):
        """Sets the refinery of this CalculatorRefineryModel.


        :param refinery: The refinery of this CalculatorRefineryModel.  # noqa: E501
        :type: RefineryModel
        """

        self._refinery = refinery

    @property
    def units(self):
        """Gets the units of this CalculatorRefineryModel.  # noqa: E501


        :return: The units of this CalculatorRefineryModel.  # noqa: E501
        :rtype: list[UnitModel]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this CalculatorRefineryModel.


        :param units: The units of this CalculatorRefineryModel.  # noqa: E501
        :type: list[UnitModel]
        """

        self._units = units

    @property
    def crudes(self):
        """Gets the crudes of this CalculatorRefineryModel.  # noqa: E501


        :return: The crudes of this CalculatorRefineryModel.  # noqa: E501
        :rtype: list[CrudeModel]
        """
        return self._crudes

    @crudes.setter
    def crudes(self, crudes):
        """Sets the crudes of this CalculatorRefineryModel.


        :param crudes: The crudes of this CalculatorRefineryModel.  # noqa: E501
        :type: list[CrudeModel]
        """

        self._crudes = crudes

    @property
    def all_crudes(self):
        """Gets the all_crudes of this CalculatorRefineryModel.  # noqa: E501


        :return: The all_crudes of this CalculatorRefineryModel.  # noqa: E501
        :rtype: list[CrudeModel]
        """
        return self._all_crudes

    @all_crudes.setter
    def all_crudes(self, all_crudes):
        """Sets the all_crudes of this CalculatorRefineryModel.


        :param all_crudes: The all_crudes of this CalculatorRefineryModel.  # noqa: E501
        :type: list[CrudeModel]
        """

        self._all_crudes = all_crudes

    @property
    def light_crudes(self):
        """Gets the light_crudes of this CalculatorRefineryModel.  # noqa: E501


        :return: The light_crudes of this CalculatorRefineryModel.  # noqa: E501
        :rtype: list[CrudeModel]
        """
        return self._light_crudes

    @light_crudes.setter
    def light_crudes(self, light_crudes):
        """Sets the light_crudes of this CalculatorRefineryModel.


        :param light_crudes: The light_crudes of this CalculatorRefineryModel.  # noqa: E501
        :type: list[CrudeModel]
        """

        self._light_crudes = light_crudes

    @property
    def intermediate_crudes(self):
        """Gets the intermediate_crudes of this CalculatorRefineryModel.  # noqa: E501


        :return: The intermediate_crudes of this CalculatorRefineryModel.  # noqa: E501
        :rtype: list[CrudeModel]
        """
        return self._intermediate_crudes

    @intermediate_crudes.setter
    def intermediate_crudes(self, intermediate_crudes):
        """Sets the intermediate_crudes of this CalculatorRefineryModel.


        :param intermediate_crudes: The intermediate_crudes of this CalculatorRefineryModel.  # noqa: E501
        :type: list[CrudeModel]
        """

        self._intermediate_crudes = intermediate_crudes

    @property
    def heavy_crudes(self):
        """Gets the heavy_crudes of this CalculatorRefineryModel.  # noqa: E501


        :return: The heavy_crudes of this CalculatorRefineryModel.  # noqa: E501
        :rtype: list[CrudeModel]
        """
        return self._heavy_crudes

    @heavy_crudes.setter
    def heavy_crudes(self, heavy_crudes):
        """Sets the heavy_crudes of this CalculatorRefineryModel.


        :param heavy_crudes: The heavy_crudes of this CalculatorRefineryModel.  # noqa: E501
        :type: list[CrudeModel]
        """

        self._heavy_crudes = heavy_crudes

    @property
    def product_prices(self):
        """Gets the product_prices of this CalculatorRefineryModel.  # noqa: E501


        :return: The product_prices of this CalculatorRefineryModel.  # noqa: E501
        :rtype: list[ProductPriceModel]
        """
        return self._product_prices

    @product_prices.setter
    def product_prices(self, product_prices):
        """Sets the product_prices of this CalculatorRefineryModel.


        :param product_prices: The product_prices of this CalculatorRefineryModel.  # noqa: E501
        :type: list[ProductPriceModel]
        """

        self._product_prices = product_prices

    @property
    def end_points(self):
        """Gets the end_points of this CalculatorRefineryModel.  # noqa: E501


        :return: The end_points of this CalculatorRefineryModel.  # noqa: E501
        :rtype: list[EndPointModel]
        """
        return self._end_points

    @end_points.setter
    def end_points(self, end_points):
        """Sets the end_points of this CalculatorRefineryModel.


        :param end_points: The end_points of this CalculatorRefineryModel.  # noqa: E501
        :type: list[EndPointModel]
        """

        self._end_points = end_points

    @property
    def is_template(self):
        """Gets the is_template of this CalculatorRefineryModel.  # noqa: E501


        :return: The is_template of this CalculatorRefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this CalculatorRefineryModel.


        :param is_template: The is_template of this CalculatorRefineryModel.  # noqa: E501
        :type: bool
        """

        self._is_template = is_template

    @property
    def outputs(self):
        """Gets the outputs of this CalculatorRefineryModel.  # noqa: E501


        :return: The outputs of this CalculatorRefineryModel.  # noqa: E501
        :rtype: list[CalculatorRefineryOutputModel]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this CalculatorRefineryModel.


        :param outputs: The outputs of this CalculatorRefineryModel.  # noqa: E501
        :type: list[CalculatorRefineryOutputModel]
        """

        self._outputs = outputs

    @property
    def product_price_unit_type(self):
        """Gets the product_price_unit_type of this CalculatorRefineryModel.  # noqa: E501


        :return: The product_price_unit_type of this CalculatorRefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._product_price_unit_type

    @product_price_unit_type.setter
    def product_price_unit_type(self, product_price_unit_type):
        """Sets the product_price_unit_type of this CalculatorRefineryModel.


        :param product_price_unit_type: The product_price_unit_type of this CalculatorRefineryModel.  # noqa: E501
        :type: str
        """

        self._product_price_unit_type = product_price_unit_type

    @property
    def apply_all_crude_composition(self):
        """Gets the apply_all_crude_composition of this CalculatorRefineryModel.  # noqa: E501


        :return: The apply_all_crude_composition of this CalculatorRefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._apply_all_crude_composition

    @apply_all_crude_composition.setter
    def apply_all_crude_composition(self, apply_all_crude_composition):
        """Sets the apply_all_crude_composition of this CalculatorRefineryModel.


        :param apply_all_crude_composition: The apply_all_crude_composition of this CalculatorRefineryModel.  # noqa: E501
        :type: bool
        """

        self._apply_all_crude_composition = apply_all_crude_composition

    @property
    def use_design_mode(self):
        """Gets the use_design_mode of this CalculatorRefineryModel.  # noqa: E501


        :return: The use_design_mode of this CalculatorRefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_design_mode

    @use_design_mode.setter
    def use_design_mode(self, use_design_mode):
        """Sets the use_design_mode of this CalculatorRefineryModel.


        :param use_design_mode: The use_design_mode of this CalculatorRefineryModel.  # noqa: E501
        :type: bool
        """

        self._use_design_mode = use_design_mode

    @property
    def is_iir_refinery(self):
        """Gets the is_iir_refinery of this CalculatorRefineryModel.  # noqa: E501


        :return: The is_iir_refinery of this CalculatorRefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_iir_refinery

    @is_iir_refinery.setter
    def is_iir_refinery(self, is_iir_refinery):
        """Sets the is_iir_refinery of this CalculatorRefineryModel.


        :param is_iir_refinery: The is_iir_refinery of this CalculatorRefineryModel.  # noqa: E501
        :type: bool
        """

        self._is_iir_refinery = is_iir_refinery

    @property
    def carbon_penalty(self):
        """Gets the carbon_penalty of this CalculatorRefineryModel.  # noqa: E501


        :return: The carbon_penalty of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._carbon_penalty

    @carbon_penalty.setter
    def carbon_penalty(self, carbon_penalty):
        """Sets the carbon_penalty of this CalculatorRefineryModel.


        :param carbon_penalty: The carbon_penalty of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._carbon_penalty = carbon_penalty

    @property
    def reid_vapor_pressure(self):
        """Gets the reid_vapor_pressure of this CalculatorRefineryModel.  # noqa: E501


        :return: The reid_vapor_pressure of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._reid_vapor_pressure

    @reid_vapor_pressure.setter
    def reid_vapor_pressure(self, reid_vapor_pressure):
        """Sets the reid_vapor_pressure of this CalculatorRefineryModel.


        :param reid_vapor_pressure: The reid_vapor_pressure of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._reid_vapor_pressure = reid_vapor_pressure

    @property
    def blue_hydrogen_percent(self):
        """Gets the blue_hydrogen_percent of this CalculatorRefineryModel.  # noqa: E501


        :return: The blue_hydrogen_percent of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._blue_hydrogen_percent

    @blue_hydrogen_percent.setter
    def blue_hydrogen_percent(self, blue_hydrogen_percent):
        """Sets the blue_hydrogen_percent of this CalculatorRefineryModel.


        :param blue_hydrogen_percent: The blue_hydrogen_percent of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._blue_hydrogen_percent = blue_hydrogen_percent

    @property
    def blue_hydrogen_price(self):
        """Gets the blue_hydrogen_price of this CalculatorRefineryModel.  # noqa: E501


        :return: The blue_hydrogen_price of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._blue_hydrogen_price

    @blue_hydrogen_price.setter
    def blue_hydrogen_price(self, blue_hydrogen_price):
        """Sets the blue_hydrogen_price of this CalculatorRefineryModel.


        :param blue_hydrogen_price: The blue_hydrogen_price of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._blue_hydrogen_price = blue_hydrogen_price

    @property
    def green_hydrogen_percent(self):
        """Gets the green_hydrogen_percent of this CalculatorRefineryModel.  # noqa: E501


        :return: The green_hydrogen_percent of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._green_hydrogen_percent

    @green_hydrogen_percent.setter
    def green_hydrogen_percent(self, green_hydrogen_percent):
        """Sets the green_hydrogen_percent of this CalculatorRefineryModel.


        :param green_hydrogen_percent: The green_hydrogen_percent of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._green_hydrogen_percent = green_hydrogen_percent

    @property
    def green_hydrogen_price(self):
        """Gets the green_hydrogen_price of this CalculatorRefineryModel.  # noqa: E501


        :return: The green_hydrogen_price of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._green_hydrogen_price

    @green_hydrogen_price.setter
    def green_hydrogen_price(self, green_hydrogen_price):
        """Sets the green_hydrogen_price of this CalculatorRefineryModel.


        :param green_hydrogen_price: The green_hydrogen_price of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._green_hydrogen_price = green_hydrogen_price

    @property
    def grey_hydrogen_percent(self):
        """Gets the grey_hydrogen_percent of this CalculatorRefineryModel.  # noqa: E501


        :return: The grey_hydrogen_percent of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._grey_hydrogen_percent

    @grey_hydrogen_percent.setter
    def grey_hydrogen_percent(self, grey_hydrogen_percent):
        """Sets the grey_hydrogen_percent of this CalculatorRefineryModel.


        :param grey_hydrogen_percent: The grey_hydrogen_percent of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._grey_hydrogen_percent = grey_hydrogen_percent

    @property
    def grey_hydrogen_price(self):
        """Gets the grey_hydrogen_price of this CalculatorRefineryModel.  # noqa: E501


        :return: The grey_hydrogen_price of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._grey_hydrogen_price

    @grey_hydrogen_price.setter
    def grey_hydrogen_price(self, grey_hydrogen_price):
        """Sets the grey_hydrogen_price of this CalculatorRefineryModel.


        :param grey_hydrogen_price: The grey_hydrogen_price of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._grey_hydrogen_price = grey_hydrogen_price

    @property
    def purchase_vgo(self):
        """Gets the purchase_vgo of this CalculatorRefineryModel.  # noqa: E501


        :return: The purchase_vgo of this CalculatorRefineryModel.  # noqa: E501
        :rtype: float
        """
        return self._purchase_vgo

    @purchase_vgo.setter
    def purchase_vgo(self, purchase_vgo):
        """Sets the purchase_vgo of this CalculatorRefineryModel.


        :param purchase_vgo: The purchase_vgo of this CalculatorRefineryModel.  # noqa: E501
        :type: float
        """

        self._purchase_vgo = purchase_vgo

    @property
    def message(self):
        """Gets the message of this CalculatorRefineryModel.  # noqa: E501


        :return: The message of this CalculatorRefineryModel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CalculatorRefineryModel.


        :param message: The message of this CalculatorRefineryModel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def success(self):
        """Gets the success of this CalculatorRefineryModel.  # noqa: E501


        :return: The success of this CalculatorRefineryModel.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this CalculatorRefineryModel.


        :param success: The success of this CalculatorRefineryModel.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculatorRefineryModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculatorRefineryModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
