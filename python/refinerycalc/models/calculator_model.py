# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalculatorModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notes': 'str',
        'id': 'str',
        'is_processed': 'bool',
        'is_deleted': 'bool',
        'percent_solved': 'float',
        'notify_when_solved': 'bool',
        'is_solved': 'bool',
        'solve_status': 'str',
        'start_time': 'datetime',
        'stop_time': 'datetime',
        'pdf_output': 'str',
        'excel_output': 'str',
        'notification_email': 'str',
        'timed_out': 'bool',
        'data_source': 'DataSource',
        'refineries': 'list[CalculatorRefineryModel]',
        'is_solving': 'bool',
        'is_cancelled': 'bool',
        'is_engine_mode': 'bool',
        'duration': 'TimeSpan',
        'refinery_count': 'int',
        'created_on': 'datetime',
        'name': 'str',
        'solve_time_remaining': 'str',
        'modified_on': 'datetime',
        'has_scheduled_runs': 'bool',
        'is_time_series': 'bool',
        'time_series_input_file': 'str',
        'solver_machine_name': 'str',
        'output_type': 'SolverOutputType'
    }

    attribute_map = {
        'notes': 'notes',
        'id': 'id',
        'is_processed': 'isProcessed',
        'is_deleted': 'isDeleted',
        'percent_solved': 'percentSolved',
        'notify_when_solved': 'notifyWhenSolved',
        'is_solved': 'isSolved',
        'solve_status': 'solveStatus',
        'start_time': 'startTime',
        'stop_time': 'stopTime',
        'pdf_output': 'pdfOutput',
        'excel_output': 'excelOutput',
        'notification_email': 'notificationEmail',
        'timed_out': 'timedOut',
        'data_source': 'dataSource',
        'refineries': 'refineries',
        'is_solving': 'isSolving',
        'is_cancelled': 'isCancelled',
        'is_engine_mode': 'isEngineMode',
        'duration': 'duration',
        'refinery_count': 'refineryCount',
        'created_on': 'createdOn',
        'name': 'name',
        'solve_time_remaining': 'solveTimeRemaining',
        'modified_on': 'modifiedOn',
        'has_scheduled_runs': 'hasScheduledRuns',
        'is_time_series': 'isTimeSeries',
        'time_series_input_file': 'timeSeriesInputFile',
        'solver_machine_name': 'solverMachineName',
        'output_type': 'outputType'
    }

    def __init__(self, notes=None, id=None, is_processed=None, is_deleted=None, percent_solved=None, notify_when_solved=None, is_solved=None, solve_status=None, start_time=None, stop_time=None, pdf_output=None, excel_output=None, notification_email=None, timed_out=None, data_source=None, refineries=None, is_solving=None, is_cancelled=None, is_engine_mode=None, duration=None, refinery_count=None, created_on=None, name=None, solve_time_remaining=None, modified_on=None, has_scheduled_runs=None, is_time_series=None, time_series_input_file=None, solver_machine_name=None, output_type=None):  # noqa: E501
        """CalculatorModel - a model defined in Swagger"""  # noqa: E501
        self._notes = None
        self._id = None
        self._is_processed = None
        self._is_deleted = None
        self._percent_solved = None
        self._notify_when_solved = None
        self._is_solved = None
        self._solve_status = None
        self._start_time = None
        self._stop_time = None
        self._pdf_output = None
        self._excel_output = None
        self._notification_email = None
        self._timed_out = None
        self._data_source = None
        self._refineries = None
        self._is_solving = None
        self._is_cancelled = None
        self._is_engine_mode = None
        self._duration = None
        self._refinery_count = None
        self._created_on = None
        self._name = None
        self._solve_time_remaining = None
        self._modified_on = None
        self._has_scheduled_runs = None
        self._is_time_series = None
        self._time_series_input_file = None
        self._solver_machine_name = None
        self._output_type = None
        self.discriminator = None
        if notes is not None:
            self.notes = notes
        if id is not None:
            self.id = id
        if is_processed is not None:
            self.is_processed = is_processed
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if percent_solved is not None:
            self.percent_solved = percent_solved
        if notify_when_solved is not None:
            self.notify_when_solved = notify_when_solved
        if is_solved is not None:
            self.is_solved = is_solved
        if solve_status is not None:
            self.solve_status = solve_status
        if start_time is not None:
            self.start_time = start_time
        if stop_time is not None:
            self.stop_time = stop_time
        if pdf_output is not None:
            self.pdf_output = pdf_output
        if excel_output is not None:
            self.excel_output = excel_output
        if notification_email is not None:
            self.notification_email = notification_email
        if timed_out is not None:
            self.timed_out = timed_out
        if data_source is not None:
            self.data_source = data_source
        if refineries is not None:
            self.refineries = refineries
        if is_solving is not None:
            self.is_solving = is_solving
        if is_cancelled is not None:
            self.is_cancelled = is_cancelled
        if is_engine_mode is not None:
            self.is_engine_mode = is_engine_mode
        if duration is not None:
            self.duration = duration
        if refinery_count is not None:
            self.refinery_count = refinery_count
        if created_on is not None:
            self.created_on = created_on
        if name is not None:
            self.name = name
        if solve_time_remaining is not None:
            self.solve_time_remaining = solve_time_remaining
        if modified_on is not None:
            self.modified_on = modified_on
        if has_scheduled_runs is not None:
            self.has_scheduled_runs = has_scheduled_runs
        if is_time_series is not None:
            self.is_time_series = is_time_series
        if time_series_input_file is not None:
            self.time_series_input_file = time_series_input_file
        if solver_machine_name is not None:
            self.solver_machine_name = solver_machine_name
        if output_type is not None:
            self.output_type = output_type

    @property
    def notes(self):
        """Gets the notes of this CalculatorModel.  # noqa: E501


        :return: The notes of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CalculatorModel.


        :param notes: The notes of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def id(self):
        """Gets the id of this CalculatorModel.  # noqa: E501


        :return: The id of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalculatorModel.


        :param id: The id of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_processed(self):
        """Gets the is_processed of this CalculatorModel.  # noqa: E501


        :return: The is_processed of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_processed

    @is_processed.setter
    def is_processed(self, is_processed):
        """Sets the is_processed of this CalculatorModel.


        :param is_processed: The is_processed of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._is_processed = is_processed

    @property
    def is_deleted(self):
        """Gets the is_deleted of this CalculatorModel.  # noqa: E501


        :return: The is_deleted of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this CalculatorModel.


        :param is_deleted: The is_deleted of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def percent_solved(self):
        """Gets the percent_solved of this CalculatorModel.  # noqa: E501


        :return: The percent_solved of this CalculatorModel.  # noqa: E501
        :rtype: float
        """
        return self._percent_solved

    @percent_solved.setter
    def percent_solved(self, percent_solved):
        """Sets the percent_solved of this CalculatorModel.


        :param percent_solved: The percent_solved of this CalculatorModel.  # noqa: E501
        :type: float
        """

        self._percent_solved = percent_solved

    @property
    def notify_when_solved(self):
        """Gets the notify_when_solved of this CalculatorModel.  # noqa: E501


        :return: The notify_when_solved of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._notify_when_solved

    @notify_when_solved.setter
    def notify_when_solved(self, notify_when_solved):
        """Sets the notify_when_solved of this CalculatorModel.


        :param notify_when_solved: The notify_when_solved of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._notify_when_solved = notify_when_solved

    @property
    def is_solved(self):
        """Gets the is_solved of this CalculatorModel.  # noqa: E501


        :return: The is_solved of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_solved

    @is_solved.setter
    def is_solved(self, is_solved):
        """Sets the is_solved of this CalculatorModel.


        :param is_solved: The is_solved of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._is_solved = is_solved

    @property
    def solve_status(self):
        """Gets the solve_status of this CalculatorModel.  # noqa: E501


        :return: The solve_status of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._solve_status

    @solve_status.setter
    def solve_status(self, solve_status):
        """Sets the solve_status of this CalculatorModel.


        :param solve_status: The solve_status of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._solve_status = solve_status

    @property
    def start_time(self):
        """Gets the start_time of this CalculatorModel.  # noqa: E501


        :return: The start_time of this CalculatorModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CalculatorModel.


        :param start_time: The start_time of this CalculatorModel.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def stop_time(self):
        """Gets the stop_time of this CalculatorModel.  # noqa: E501


        :return: The stop_time of this CalculatorModel.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_time

    @stop_time.setter
    def stop_time(self, stop_time):
        """Sets the stop_time of this CalculatorModel.


        :param stop_time: The stop_time of this CalculatorModel.  # noqa: E501
        :type: datetime
        """

        self._stop_time = stop_time

    @property
    def pdf_output(self):
        """Gets the pdf_output of this CalculatorModel.  # noqa: E501


        :return: The pdf_output of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._pdf_output

    @pdf_output.setter
    def pdf_output(self, pdf_output):
        """Sets the pdf_output of this CalculatorModel.


        :param pdf_output: The pdf_output of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._pdf_output = pdf_output

    @property
    def excel_output(self):
        """Gets the excel_output of this CalculatorModel.  # noqa: E501


        :return: The excel_output of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._excel_output

    @excel_output.setter
    def excel_output(self, excel_output):
        """Sets the excel_output of this CalculatorModel.


        :param excel_output: The excel_output of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._excel_output = excel_output

    @property
    def notification_email(self):
        """Gets the notification_email of this CalculatorModel.  # noqa: E501


        :return: The notification_email of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._notification_email

    @notification_email.setter
    def notification_email(self, notification_email):
        """Sets the notification_email of this CalculatorModel.


        :param notification_email: The notification_email of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._notification_email = notification_email

    @property
    def timed_out(self):
        """Gets the timed_out of this CalculatorModel.  # noqa: E501


        :return: The timed_out of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._timed_out

    @timed_out.setter
    def timed_out(self, timed_out):
        """Sets the timed_out of this CalculatorModel.


        :param timed_out: The timed_out of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._timed_out = timed_out

    @property
    def data_source(self):
        """Gets the data_source of this CalculatorModel.  # noqa: E501


        :return: The data_source of this CalculatorModel.  # noqa: E501
        :rtype: DataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this CalculatorModel.


        :param data_source: The data_source of this CalculatorModel.  # noqa: E501
        :type: DataSource
        """

        self._data_source = data_source

    @property
    def refineries(self):
        """Gets the refineries of this CalculatorModel.  # noqa: E501


        :return: The refineries of this CalculatorModel.  # noqa: E501
        :rtype: list[CalculatorRefineryModel]
        """
        return self._refineries

    @refineries.setter
    def refineries(self, refineries):
        """Sets the refineries of this CalculatorModel.


        :param refineries: The refineries of this CalculatorModel.  # noqa: E501
        :type: list[CalculatorRefineryModel]
        """

        self._refineries = refineries

    @property
    def is_solving(self):
        """Gets the is_solving of this CalculatorModel.  # noqa: E501


        :return: The is_solving of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_solving

    @is_solving.setter
    def is_solving(self, is_solving):
        """Sets the is_solving of this CalculatorModel.


        :param is_solving: The is_solving of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._is_solving = is_solving

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this CalculatorModel.  # noqa: E501


        :return: The is_cancelled of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this CalculatorModel.


        :param is_cancelled: The is_cancelled of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._is_cancelled = is_cancelled

    @property
    def is_engine_mode(self):
        """Gets the is_engine_mode of this CalculatorModel.  # noqa: E501


        :return: The is_engine_mode of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_engine_mode

    @is_engine_mode.setter
    def is_engine_mode(self, is_engine_mode):
        """Sets the is_engine_mode of this CalculatorModel.


        :param is_engine_mode: The is_engine_mode of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._is_engine_mode = is_engine_mode

    @property
    def duration(self):
        """Gets the duration of this CalculatorModel.  # noqa: E501


        :return: The duration of this CalculatorModel.  # noqa: E501
        :rtype: TimeSpan
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CalculatorModel.


        :param duration: The duration of this CalculatorModel.  # noqa: E501
        :type: TimeSpan
        """

        self._duration = duration

    @property
    def refinery_count(self):
        """Gets the refinery_count of this CalculatorModel.  # noqa: E501


        :return: The refinery_count of this CalculatorModel.  # noqa: E501
        :rtype: int
        """
        return self._refinery_count

    @refinery_count.setter
    def refinery_count(self, refinery_count):
        """Sets the refinery_count of this CalculatorModel.


        :param refinery_count: The refinery_count of this CalculatorModel.  # noqa: E501
        :type: int
        """

        self._refinery_count = refinery_count

    @property
    def created_on(self):
        """Gets the created_on of this CalculatorModel.  # noqa: E501


        :return: The created_on of this CalculatorModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this CalculatorModel.


        :param created_on: The created_on of this CalculatorModel.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def name(self):
        """Gets the name of this CalculatorModel.  # noqa: E501


        :return: The name of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalculatorModel.


        :param name: The name of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def solve_time_remaining(self):
        """Gets the solve_time_remaining of this CalculatorModel.  # noqa: E501


        :return: The solve_time_remaining of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._solve_time_remaining

    @solve_time_remaining.setter
    def solve_time_remaining(self, solve_time_remaining):
        """Sets the solve_time_remaining of this CalculatorModel.


        :param solve_time_remaining: The solve_time_remaining of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._solve_time_remaining = solve_time_remaining

    @property
    def modified_on(self):
        """Gets the modified_on of this CalculatorModel.  # noqa: E501


        :return: The modified_on of this CalculatorModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this CalculatorModel.


        :param modified_on: The modified_on of this CalculatorModel.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def has_scheduled_runs(self):
        """Gets the has_scheduled_runs of this CalculatorModel.  # noqa: E501


        :return: The has_scheduled_runs of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_scheduled_runs

    @has_scheduled_runs.setter
    def has_scheduled_runs(self, has_scheduled_runs):
        """Sets the has_scheduled_runs of this CalculatorModel.


        :param has_scheduled_runs: The has_scheduled_runs of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._has_scheduled_runs = has_scheduled_runs

    @property
    def is_time_series(self):
        """Gets the is_time_series of this CalculatorModel.  # noqa: E501


        :return: The is_time_series of this CalculatorModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_time_series

    @is_time_series.setter
    def is_time_series(self, is_time_series):
        """Sets the is_time_series of this CalculatorModel.


        :param is_time_series: The is_time_series of this CalculatorModel.  # noqa: E501
        :type: bool
        """

        self._is_time_series = is_time_series

    @property
    def time_series_input_file(self):
        """Gets the time_series_input_file of this CalculatorModel.  # noqa: E501


        :return: The time_series_input_file of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._time_series_input_file

    @time_series_input_file.setter
    def time_series_input_file(self, time_series_input_file):
        """Sets the time_series_input_file of this CalculatorModel.


        :param time_series_input_file: The time_series_input_file of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._time_series_input_file = time_series_input_file

    @property
    def solver_machine_name(self):
        """Gets the solver_machine_name of this CalculatorModel.  # noqa: E501


        :return: The solver_machine_name of this CalculatorModel.  # noqa: E501
        :rtype: str
        """
        return self._solver_machine_name

    @solver_machine_name.setter
    def solver_machine_name(self, solver_machine_name):
        """Sets the solver_machine_name of this CalculatorModel.


        :param solver_machine_name: The solver_machine_name of this CalculatorModel.  # noqa: E501
        :type: str
        """

        self._solver_machine_name = solver_machine_name

    @property
    def output_type(self):
        """Gets the output_type of this CalculatorModel.  # noqa: E501


        :return: The output_type of this CalculatorModel.  # noqa: E501
        :rtype: SolverOutputType
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this CalculatorModel.


        :param output_type: The output_type of this CalculatorModel.  # noqa: E501
        :type: SolverOutputType
        """

        self._output_type = output_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculatorModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculatorModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
