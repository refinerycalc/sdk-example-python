# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnitModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'rate': 'float',
        'bias': 'float',
        'display_order': 'int',
        'is_shutdown': 'bool',
        'can_edit_health_state': 'bool',
        'health_state': 'HealthState'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'rate': 'rate',
        'bias': 'bias',
        'display_order': 'displayOrder',
        'is_shutdown': 'isShutdown',
        'can_edit_health_state': 'canEditHealthState',
        'health_state': 'healthState'
    }

    def __init__(self, id=None, name=None, rate=None, bias=None, display_order=None, is_shutdown=None, can_edit_health_state=None, health_state=None):  # noqa: E501
        """UnitModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._rate = None
        self._bias = None
        self._display_order = None
        self._is_shutdown = None
        self._can_edit_health_state = None
        self._health_state = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if rate is not None:
            self.rate = rate
        if bias is not None:
            self.bias = bias
        if display_order is not None:
            self.display_order = display_order
        if is_shutdown is not None:
            self.is_shutdown = is_shutdown
        if can_edit_health_state is not None:
            self.can_edit_health_state = can_edit_health_state
        if health_state is not None:
            self.health_state = health_state

    @property
    def id(self):
        """Gets the id of this UnitModel.  # noqa: E501


        :return: The id of this UnitModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UnitModel.


        :param id: The id of this UnitModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UnitModel.  # noqa: E501


        :return: The name of this UnitModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UnitModel.


        :param name: The name of this UnitModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this UnitModel.  # noqa: E501


        :return: The rate of this UnitModel.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this UnitModel.


        :param rate: The rate of this UnitModel.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def bias(self):
        """Gets the bias of this UnitModel.  # noqa: E501


        :return: The bias of this UnitModel.  # noqa: E501
        :rtype: float
        """
        return self._bias

    @bias.setter
    def bias(self, bias):
        """Sets the bias of this UnitModel.


        :param bias: The bias of this UnitModel.  # noqa: E501
        :type: float
        """

        self._bias = bias

    @property
    def display_order(self):
        """Gets the display_order of this UnitModel.  # noqa: E501


        :return: The display_order of this UnitModel.  # noqa: E501
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this UnitModel.


        :param display_order: The display_order of this UnitModel.  # noqa: E501
        :type: int
        """

        self._display_order = display_order

    @property
    def is_shutdown(self):
        """Gets the is_shutdown of this UnitModel.  # noqa: E501


        :return: The is_shutdown of this UnitModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_shutdown

    @is_shutdown.setter
    def is_shutdown(self, is_shutdown):
        """Sets the is_shutdown of this UnitModel.


        :param is_shutdown: The is_shutdown of this UnitModel.  # noqa: E501
        :type: bool
        """

        self._is_shutdown = is_shutdown

    @property
    def can_edit_health_state(self):
        """Gets the can_edit_health_state of this UnitModel.  # noqa: E501


        :return: The can_edit_health_state of this UnitModel.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_health_state

    @can_edit_health_state.setter
    def can_edit_health_state(self, can_edit_health_state):
        """Sets the can_edit_health_state of this UnitModel.


        :param can_edit_health_state: The can_edit_health_state of this UnitModel.  # noqa: E501
        :type: bool
        """

        self._can_edit_health_state = can_edit_health_state

    @property
    def health_state(self):
        """Gets the health_state of this UnitModel.  # noqa: E501


        :return: The health_state of this UnitModel.  # noqa: E501
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this UnitModel.


        :param health_state: The health_state of this UnitModel.  # noqa: E501
        :type: HealthState
        """

        self._health_state = health_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnitModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnitModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
