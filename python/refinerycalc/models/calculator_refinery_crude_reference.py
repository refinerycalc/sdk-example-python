# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalculatorRefineryCrudeReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'allocation': 'str',
        'alloction_value': 'float',
        'price': 'float',
        'freight': 'float',
        'api': 'float',
        'sulphur': 'float',
        'last_modified_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'allocation': 'allocation',
        'alloction_value': 'alloctionValue',
        'price': 'price',
        'freight': 'freight',
        'api': 'api',
        'sulphur': 'sulphur',
        'last_modified_date': 'lastModifiedDate'
    }

    def __init__(self, id=None, name=None, allocation=None, alloction_value=None, price=None, freight=None, api=None, sulphur=None, last_modified_date=None):  # noqa: E501
        """CalculatorRefineryCrudeReference - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._allocation = None
        self._alloction_value = None
        self._price = None
        self._freight = None
        self._api = None
        self._sulphur = None
        self._last_modified_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if allocation is not None:
            self.allocation = allocation
        if alloction_value is not None:
            self.alloction_value = alloction_value
        if price is not None:
            self.price = price
        if freight is not None:
            self.freight = freight
        if api is not None:
            self.api = api
        if sulphur is not None:
            self.sulphur = sulphur
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date

    @property
    def id(self):
        """Gets the id of this CalculatorRefineryCrudeReference.  # noqa: E501


        :return: The id of this CalculatorRefineryCrudeReference.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalculatorRefineryCrudeReference.


        :param id: The id of this CalculatorRefineryCrudeReference.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CalculatorRefineryCrudeReference.  # noqa: E501


        :return: The name of this CalculatorRefineryCrudeReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalculatorRefineryCrudeReference.


        :param name: The name of this CalculatorRefineryCrudeReference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def allocation(self):
        """Gets the allocation of this CalculatorRefineryCrudeReference.  # noqa: E501


        :return: The allocation of this CalculatorRefineryCrudeReference.  # noqa: E501
        :rtype: str
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this CalculatorRefineryCrudeReference.


        :param allocation: The allocation of this CalculatorRefineryCrudeReference.  # noqa: E501
        :type: str
        """

        self._allocation = allocation

    @property
    def alloction_value(self):
        """Gets the alloction_value of this CalculatorRefineryCrudeReference.  # noqa: E501


        :return: The alloction_value of this CalculatorRefineryCrudeReference.  # noqa: E501
        :rtype: float
        """
        return self._alloction_value

    @alloction_value.setter
    def alloction_value(self, alloction_value):
        """Sets the alloction_value of this CalculatorRefineryCrudeReference.


        :param alloction_value: The alloction_value of this CalculatorRefineryCrudeReference.  # noqa: E501
        :type: float
        """

        self._alloction_value = alloction_value

    @property
    def price(self):
        """Gets the price of this CalculatorRefineryCrudeReference.  # noqa: E501


        :return: The price of this CalculatorRefineryCrudeReference.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CalculatorRefineryCrudeReference.


        :param price: The price of this CalculatorRefineryCrudeReference.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def freight(self):
        """Gets the freight of this CalculatorRefineryCrudeReference.  # noqa: E501


        :return: The freight of this CalculatorRefineryCrudeReference.  # noqa: E501
        :rtype: float
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """Sets the freight of this CalculatorRefineryCrudeReference.


        :param freight: The freight of this CalculatorRefineryCrudeReference.  # noqa: E501
        :type: float
        """

        self._freight = freight

    @property
    def api(self):
        """Gets the api of this CalculatorRefineryCrudeReference.  # noqa: E501


        :return: The api of this CalculatorRefineryCrudeReference.  # noqa: E501
        :rtype: float
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this CalculatorRefineryCrudeReference.


        :param api: The api of this CalculatorRefineryCrudeReference.  # noqa: E501
        :type: float
        """

        self._api = api

    @property
    def sulphur(self):
        """Gets the sulphur of this CalculatorRefineryCrudeReference.  # noqa: E501


        :return: The sulphur of this CalculatorRefineryCrudeReference.  # noqa: E501
        :rtype: float
        """
        return self._sulphur

    @sulphur.setter
    def sulphur(self, sulphur):
        """Sets the sulphur of this CalculatorRefineryCrudeReference.


        :param sulphur: The sulphur of this CalculatorRefineryCrudeReference.  # noqa: E501
        :type: float
        """

        self._sulphur = sulphur

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this CalculatorRefineryCrudeReference.  # noqa: E501


        :return: The last_modified_date of this CalculatorRefineryCrudeReference.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this CalculatorRefineryCrudeReference.


        :param last_modified_date: The last_modified_date of this CalculatorRefineryCrudeReference.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculatorRefineryCrudeReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculatorRefineryCrudeReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
