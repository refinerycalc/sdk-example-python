# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunSimulationResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'message': 'str',
        'solve_time_remaining': 'str',
        'solve_status': 'str',
        'is_solved': 'bool',
        'start_time': 'datetime',
        'stop_time': 'datetime',
        'duration_in_minutes': 'TimeSpan',
        'percent_solved': 'float',
        'is_cancelled': 'bool',
        'is_solving': 'bool',
        'is_processed': 'bool'
    }

    attribute_map = {
        'success': 'success',
        'message': 'message',
        'solve_time_remaining': 'solveTimeRemaining',
        'solve_status': 'solveStatus',
        'is_solved': 'isSolved',
        'start_time': 'startTime',
        'stop_time': 'stopTime',
        'duration_in_minutes': 'durationInMinutes',
        'percent_solved': 'percentSolved',
        'is_cancelled': 'isCancelled',
        'is_solving': 'isSolving',
        'is_processed': 'isProcessed'
    }

    def __init__(self, success=None, message=None, solve_time_remaining=None, solve_status=None, is_solved=None, start_time=None, stop_time=None, duration_in_minutes=None, percent_solved=None, is_cancelled=None, is_solving=None, is_processed=None):  # noqa: E501
        """RunSimulationResponseModel - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._message = None
        self._solve_time_remaining = None
        self._solve_status = None
        self._is_solved = None
        self._start_time = None
        self._stop_time = None
        self._duration_in_minutes = None
        self._percent_solved = None
        self._is_cancelled = None
        self._is_solving = None
        self._is_processed = None
        self.discriminator = None
        if success is not None:
            self.success = success
        if message is not None:
            self.message = message
        if solve_time_remaining is not None:
            self.solve_time_remaining = solve_time_remaining
        if solve_status is not None:
            self.solve_status = solve_status
        if is_solved is not None:
            self.is_solved = is_solved
        if start_time is not None:
            self.start_time = start_time
        if stop_time is not None:
            self.stop_time = stop_time
        if duration_in_minutes is not None:
            self.duration_in_minutes = duration_in_minutes
        if percent_solved is not None:
            self.percent_solved = percent_solved
        if is_cancelled is not None:
            self.is_cancelled = is_cancelled
        if is_solving is not None:
            self.is_solving = is_solving
        if is_processed is not None:
            self.is_processed = is_processed

    @property
    def success(self):
        """Gets the success of this RunSimulationResponseModel.  # noqa: E501


        :return: The success of this RunSimulationResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this RunSimulationResponseModel.


        :param success: The success of this RunSimulationResponseModel.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def message(self):
        """Gets the message of this RunSimulationResponseModel.  # noqa: E501


        :return: The message of this RunSimulationResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RunSimulationResponseModel.


        :param message: The message of this RunSimulationResponseModel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def solve_time_remaining(self):
        """Gets the solve_time_remaining of this RunSimulationResponseModel.  # noqa: E501


        :return: The solve_time_remaining of this RunSimulationResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._solve_time_remaining

    @solve_time_remaining.setter
    def solve_time_remaining(self, solve_time_remaining):
        """Sets the solve_time_remaining of this RunSimulationResponseModel.


        :param solve_time_remaining: The solve_time_remaining of this RunSimulationResponseModel.  # noqa: E501
        :type: str
        """

        self._solve_time_remaining = solve_time_remaining

    @property
    def solve_status(self):
        """Gets the solve_status of this RunSimulationResponseModel.  # noqa: E501


        :return: The solve_status of this RunSimulationResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._solve_status

    @solve_status.setter
    def solve_status(self, solve_status):
        """Sets the solve_status of this RunSimulationResponseModel.


        :param solve_status: The solve_status of this RunSimulationResponseModel.  # noqa: E501
        :type: str
        """

        self._solve_status = solve_status

    @property
    def is_solved(self):
        """Gets the is_solved of this RunSimulationResponseModel.  # noqa: E501


        :return: The is_solved of this RunSimulationResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_solved

    @is_solved.setter
    def is_solved(self, is_solved):
        """Sets the is_solved of this RunSimulationResponseModel.


        :param is_solved: The is_solved of this RunSimulationResponseModel.  # noqa: E501
        :type: bool
        """

        self._is_solved = is_solved

    @property
    def start_time(self):
        """Gets the start_time of this RunSimulationResponseModel.  # noqa: E501


        :return: The start_time of this RunSimulationResponseModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RunSimulationResponseModel.


        :param start_time: The start_time of this RunSimulationResponseModel.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def stop_time(self):
        """Gets the stop_time of this RunSimulationResponseModel.  # noqa: E501


        :return: The stop_time of this RunSimulationResponseModel.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_time

    @stop_time.setter
    def stop_time(self, stop_time):
        """Sets the stop_time of this RunSimulationResponseModel.


        :param stop_time: The stop_time of this RunSimulationResponseModel.  # noqa: E501
        :type: datetime
        """

        self._stop_time = stop_time

    @property
    def duration_in_minutes(self):
        """Gets the duration_in_minutes of this RunSimulationResponseModel.  # noqa: E501


        :return: The duration_in_minutes of this RunSimulationResponseModel.  # noqa: E501
        :rtype: TimeSpan
        """
        return self._duration_in_minutes

    @duration_in_minutes.setter
    def duration_in_minutes(self, duration_in_minutes):
        """Sets the duration_in_minutes of this RunSimulationResponseModel.


        :param duration_in_minutes: The duration_in_minutes of this RunSimulationResponseModel.  # noqa: E501
        :type: TimeSpan
        """

        self._duration_in_minutes = duration_in_minutes

    @property
    def percent_solved(self):
        """Gets the percent_solved of this RunSimulationResponseModel.  # noqa: E501


        :return: The percent_solved of this RunSimulationResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._percent_solved

    @percent_solved.setter
    def percent_solved(self, percent_solved):
        """Sets the percent_solved of this RunSimulationResponseModel.


        :param percent_solved: The percent_solved of this RunSimulationResponseModel.  # noqa: E501
        :type: float
        """

        self._percent_solved = percent_solved

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this RunSimulationResponseModel.  # noqa: E501


        :return: The is_cancelled of this RunSimulationResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this RunSimulationResponseModel.


        :param is_cancelled: The is_cancelled of this RunSimulationResponseModel.  # noqa: E501
        :type: bool
        """

        self._is_cancelled = is_cancelled

    @property
    def is_solving(self):
        """Gets the is_solving of this RunSimulationResponseModel.  # noqa: E501


        :return: The is_solving of this RunSimulationResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_solving

    @is_solving.setter
    def is_solving(self, is_solving):
        """Sets the is_solving of this RunSimulationResponseModel.


        :param is_solving: The is_solving of this RunSimulationResponseModel.  # noqa: E501
        :type: bool
        """

        self._is_solving = is_solving

    @property
    def is_processed(self):
        """Gets the is_processed of this RunSimulationResponseModel.  # noqa: E501


        :return: The is_processed of this RunSimulationResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_processed

    @is_processed.setter
    def is_processed(self, is_processed):
        """Sets the is_processed of this RunSimulationResponseModel.


        :param is_processed: The is_processed of this RunSimulationResponseModel.  # noqa: E501
        :type: bool
        """

        self._is_processed = is_processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunSimulationResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunSimulationResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
