# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RefineryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'city': 'str',
        'country': 'str',
        'county': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'market_segment': 'str',
        'state_or_province': 'str',
        'pad_district': 'str',
        'region': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'city': 'city',
        'country': 'country',
        'county': 'county',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'market_segment': 'marketSegment',
        'state_or_province': 'stateOrProvince',
        'pad_district': 'padDistrict',
        'region': 'region'
    }

    def __init__(self, id=None, name=None, city=None, country=None, county=None, latitude=None, longitude=None, market_segment=None, state_or_province=None, pad_district=None, region=None):  # noqa: E501
        """RefineryResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._city = None
        self._country = None
        self._county = None
        self._latitude = None
        self._longitude = None
        self._market_segment = None
        self._state_or_province = None
        self._pad_district = None
        self._region = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if county is not None:
            self.county = county
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if market_segment is not None:
            self.market_segment = market_segment
        if state_or_province is not None:
            self.state_or_province = state_or_province
        if pad_district is not None:
            self.pad_district = pad_district
        if region is not None:
            self.region = region

    @property
    def id(self):
        """Gets the id of this RefineryResponse.  # noqa: E501


        :return: The id of this RefineryResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RefineryResponse.


        :param id: The id of this RefineryResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RefineryResponse.  # noqa: E501


        :return: The name of this RefineryResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RefineryResponse.


        :param name: The name of this RefineryResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def city(self):
        """Gets the city of this RefineryResponse.  # noqa: E501


        :return: The city of this RefineryResponse.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this RefineryResponse.


        :param city: The city of this RefineryResponse.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this RefineryResponse.  # noqa: E501


        :return: The country of this RefineryResponse.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RefineryResponse.


        :param country: The country of this RefineryResponse.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this RefineryResponse.  # noqa: E501


        :return: The county of this RefineryResponse.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this RefineryResponse.


        :param county: The county of this RefineryResponse.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def latitude(self):
        """Gets the latitude of this RefineryResponse.  # noqa: E501


        :return: The latitude of this RefineryResponse.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this RefineryResponse.


        :param latitude: The latitude of this RefineryResponse.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this RefineryResponse.  # noqa: E501


        :return: The longitude of this RefineryResponse.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this RefineryResponse.


        :param longitude: The longitude of this RefineryResponse.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def market_segment(self):
        """Gets the market_segment of this RefineryResponse.  # noqa: E501


        :return: The market_segment of this RefineryResponse.  # noqa: E501
        :rtype: str
        """
        return self._market_segment

    @market_segment.setter
    def market_segment(self, market_segment):
        """Sets the market_segment of this RefineryResponse.


        :param market_segment: The market_segment of this RefineryResponse.  # noqa: E501
        :type: str
        """

        self._market_segment = market_segment

    @property
    def state_or_province(self):
        """Gets the state_or_province of this RefineryResponse.  # noqa: E501


        :return: The state_or_province of this RefineryResponse.  # noqa: E501
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this RefineryResponse.


        :param state_or_province: The state_or_province of this RefineryResponse.  # noqa: E501
        :type: str
        """

        self._state_or_province = state_or_province

    @property
    def pad_district(self):
        """Gets the pad_district of this RefineryResponse.  # noqa: E501


        :return: The pad_district of this RefineryResponse.  # noqa: E501
        :rtype: str
        """
        return self._pad_district

    @pad_district.setter
    def pad_district(self, pad_district):
        """Sets the pad_district of this RefineryResponse.


        :param pad_district: The pad_district of this RefineryResponse.  # noqa: E501
        :type: str
        """

        self._pad_district = pad_district

    @property
    def region(self):
        """Gets the region of this RefineryResponse.  # noqa: E501


        :return: The region of this RefineryResponse.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RefineryResponse.


        :param region: The region of this RefineryResponse.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefineryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefineryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
