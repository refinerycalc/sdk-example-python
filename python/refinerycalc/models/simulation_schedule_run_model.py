# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimulationScheduleRunModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'datetime',
        'stop_time': 'datetime',
        'duration': 'TimeSpan',
        'is_completed': 'bool',
        'last_message': 'str',
        'status': 'str'
    }

    attribute_map = {
        'start_time': 'startTime',
        'stop_time': 'stopTime',
        'duration': 'duration',
        'is_completed': 'isCompleted',
        'last_message': 'lastMessage',
        'status': 'status'
    }

    def __init__(self, start_time=None, stop_time=None, duration=None, is_completed=None, last_message=None, status=None):  # noqa: E501
        """SimulationScheduleRunModel - a model defined in Swagger"""  # noqa: E501
        self._start_time = None
        self._stop_time = None
        self._duration = None
        self._is_completed = None
        self._last_message = None
        self._status = None
        self.discriminator = None
        if start_time is not None:
            self.start_time = start_time
        if stop_time is not None:
            self.stop_time = stop_time
        if duration is not None:
            self.duration = duration
        if is_completed is not None:
            self.is_completed = is_completed
        if last_message is not None:
            self.last_message = last_message
        if status is not None:
            self.status = status

    @property
    def start_time(self):
        """Gets the start_time of this SimulationScheduleRunModel.  # noqa: E501


        :return: The start_time of this SimulationScheduleRunModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SimulationScheduleRunModel.


        :param start_time: The start_time of this SimulationScheduleRunModel.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def stop_time(self):
        """Gets the stop_time of this SimulationScheduleRunModel.  # noqa: E501


        :return: The stop_time of this SimulationScheduleRunModel.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_time

    @stop_time.setter
    def stop_time(self, stop_time):
        """Sets the stop_time of this SimulationScheduleRunModel.


        :param stop_time: The stop_time of this SimulationScheduleRunModel.  # noqa: E501
        :type: datetime
        """

        self._stop_time = stop_time

    @property
    def duration(self):
        """Gets the duration of this SimulationScheduleRunModel.  # noqa: E501


        :return: The duration of this SimulationScheduleRunModel.  # noqa: E501
        :rtype: TimeSpan
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SimulationScheduleRunModel.


        :param duration: The duration of this SimulationScheduleRunModel.  # noqa: E501
        :type: TimeSpan
        """

        self._duration = duration

    @property
    def is_completed(self):
        """Gets the is_completed of this SimulationScheduleRunModel.  # noqa: E501


        :return: The is_completed of this SimulationScheduleRunModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this SimulationScheduleRunModel.


        :param is_completed: The is_completed of this SimulationScheduleRunModel.  # noqa: E501
        :type: bool
        """

        self._is_completed = is_completed

    @property
    def last_message(self):
        """Gets the last_message of this SimulationScheduleRunModel.  # noqa: E501


        :return: The last_message of this SimulationScheduleRunModel.  # noqa: E501
        :rtype: str
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this SimulationScheduleRunModel.


        :param last_message: The last_message of this SimulationScheduleRunModel.  # noqa: E501
        :type: str
        """

        self._last_message = last_message

    @property
    def status(self):
        """Gets the status of this SimulationScheduleRunModel.  # noqa: E501


        :return: The status of this SimulationScheduleRunModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SimulationScheduleRunModel.


        :param status: The status of this SimulationScheduleRunModel.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimulationScheduleRunModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimulationScheduleRunModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
