# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeSeriesDay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crudes': 'TimeseriesCrudes',
        'refinery_rate_percentage': 'float',
        'product_prices': 'TimeseriesProductPrices',
        'run_mode': 'RunMode',
        'advanced_options': 'TimeseriesAdvancedOptions'
    }

    attribute_map = {
        'crudes': 'crudes',
        'refinery_rate_percentage': 'refineryRatePercentage',
        'product_prices': 'productPrices',
        'run_mode': 'runMode',
        'advanced_options': 'advancedOptions'
    }

    def __init__(self, crudes=None, refinery_rate_percentage=None, product_prices=None, run_mode=None, advanced_options=None):  # noqa: E501
        """TimeSeriesDay - a model defined in Swagger"""  # noqa: E501
        self._crudes = None
        self._refinery_rate_percentage = None
        self._product_prices = None
        self._run_mode = None
        self._advanced_options = None
        self.discriminator = None
        if crudes is not None:
            self.crudes = crudes
        if refinery_rate_percentage is not None:
            self.refinery_rate_percentage = refinery_rate_percentage
        if product_prices is not None:
            self.product_prices = product_prices
        if run_mode is not None:
            self.run_mode = run_mode
        if advanced_options is not None:
            self.advanced_options = advanced_options

    @property
    def crudes(self):
        """Gets the crudes of this TimeSeriesDay.  # noqa: E501


        :return: The crudes of this TimeSeriesDay.  # noqa: E501
        :rtype: TimeseriesCrudes
        """
        return self._crudes

    @crudes.setter
    def crudes(self, crudes):
        """Sets the crudes of this TimeSeriesDay.


        :param crudes: The crudes of this TimeSeriesDay.  # noqa: E501
        :type: TimeseriesCrudes
        """

        self._crudes = crudes

    @property
    def refinery_rate_percentage(self):
        """Gets the refinery_rate_percentage of this TimeSeriesDay.  # noqa: E501


        :return: The refinery_rate_percentage of this TimeSeriesDay.  # noqa: E501
        :rtype: float
        """
        return self._refinery_rate_percentage

    @refinery_rate_percentage.setter
    def refinery_rate_percentage(self, refinery_rate_percentage):
        """Sets the refinery_rate_percentage of this TimeSeriesDay.


        :param refinery_rate_percentage: The refinery_rate_percentage of this TimeSeriesDay.  # noqa: E501
        :type: float
        """

        self._refinery_rate_percentage = refinery_rate_percentage

    @property
    def product_prices(self):
        """Gets the product_prices of this TimeSeriesDay.  # noqa: E501


        :return: The product_prices of this TimeSeriesDay.  # noqa: E501
        :rtype: TimeseriesProductPrices
        """
        return self._product_prices

    @product_prices.setter
    def product_prices(self, product_prices):
        """Sets the product_prices of this TimeSeriesDay.


        :param product_prices: The product_prices of this TimeSeriesDay.  # noqa: E501
        :type: TimeseriesProductPrices
        """

        self._product_prices = product_prices

    @property
    def run_mode(self):
        """Gets the run_mode of this TimeSeriesDay.  # noqa: E501


        :return: The run_mode of this TimeSeriesDay.  # noqa: E501
        :rtype: RunMode
        """
        return self._run_mode

    @run_mode.setter
    def run_mode(self, run_mode):
        """Sets the run_mode of this TimeSeriesDay.


        :param run_mode: The run_mode of this TimeSeriesDay.  # noqa: E501
        :type: RunMode
        """

        self._run_mode = run_mode

    @property
    def advanced_options(self):
        """Gets the advanced_options of this TimeSeriesDay.  # noqa: E501


        :return: The advanced_options of this TimeSeriesDay.  # noqa: E501
        :rtype: TimeseriesAdvancedOptions
        """
        return self._advanced_options

    @advanced_options.setter
    def advanced_options(self, advanced_options):
        """Sets the advanced_options of this TimeSeriesDay.


        :param advanced_options: The advanced_options of this TimeSeriesDay.  # noqa: E501
        :type: TimeseriesAdvancedOptions
        """

        self._advanced_options = advanced_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSeriesDay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesDay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
