# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeseriesAdvancedOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'purchase_vgo': 'float',
        'reid_vapor_pressure': 'float',
        'carbon_penalty': 'float',
        'blue_h2_percentage': 'float',
        'blue_h2_price': 'float',
        'green_h2_percentage': 'float',
        'green_h2_price': 'float',
        'grey_h2_percentage': 'float',
        'grey_h2_price': 'float',
        'dist_ht': 'HealthState',
        'fcc': 'HealthState',
        'gas_ht': 'HealthState',
        'goht': 'HealthState',
        'hydrk': 'HealthState',
        'hydrk_rsd': 'HealthState',
        'kero_ht': 'HealthState',
        'lubes': 'HealthState',
        'naph_ht': 'HealthState',
        'reformer': 'HealthState'
    }

    attribute_map = {
        'purchase_vgo': 'purchaseVGO',
        'reid_vapor_pressure': 'reidVaporPressure',
        'carbon_penalty': 'carbonPenalty',
        'blue_h2_percentage': 'blueH2Percentage',
        'blue_h2_price': 'blueH2Price',
        'green_h2_percentage': 'greenH2Percentage',
        'green_h2_price': 'greenH2Price',
        'grey_h2_percentage': 'greyH2Percentage',
        'grey_h2_price': 'greyH2Price',
        'dist_ht': 'distHT',
        'fcc': 'fcc',
        'gas_ht': 'gasHT',
        'goht': 'goht',
        'hydrk': 'hydrk',
        'hydrk_rsd': 'hydrkRsd',
        'kero_ht': 'keroHT',
        'lubes': 'lubes',
        'naph_ht': 'naphHT',
        'reformer': 'reformer'
    }

    def __init__(self, purchase_vgo=None, reid_vapor_pressure=None, carbon_penalty=None, blue_h2_percentage=None, blue_h2_price=None, green_h2_percentage=None, green_h2_price=None, grey_h2_percentage=None, grey_h2_price=None, dist_ht=None, fcc=None, gas_ht=None, goht=None, hydrk=None, hydrk_rsd=None, kero_ht=None, lubes=None, naph_ht=None, reformer=None):  # noqa: E501
        """TimeseriesAdvancedOptions - a model defined in Swagger"""  # noqa: E501
        self._purchase_vgo = None
        self._reid_vapor_pressure = None
        self._carbon_penalty = None
        self._blue_h2_percentage = None
        self._blue_h2_price = None
        self._green_h2_percentage = None
        self._green_h2_price = None
        self._grey_h2_percentage = None
        self._grey_h2_price = None
        self._dist_ht = None
        self._fcc = None
        self._gas_ht = None
        self._goht = None
        self._hydrk = None
        self._hydrk_rsd = None
        self._kero_ht = None
        self._lubes = None
        self._naph_ht = None
        self._reformer = None
        self.discriminator = None
        if purchase_vgo is not None:
            self.purchase_vgo = purchase_vgo
        if reid_vapor_pressure is not None:
            self.reid_vapor_pressure = reid_vapor_pressure
        if carbon_penalty is not None:
            self.carbon_penalty = carbon_penalty
        if blue_h2_percentage is not None:
            self.blue_h2_percentage = blue_h2_percentage
        if blue_h2_price is not None:
            self.blue_h2_price = blue_h2_price
        if green_h2_percentage is not None:
            self.green_h2_percentage = green_h2_percentage
        if green_h2_price is not None:
            self.green_h2_price = green_h2_price
        if grey_h2_percentage is not None:
            self.grey_h2_percentage = grey_h2_percentage
        if grey_h2_price is not None:
            self.grey_h2_price = grey_h2_price
        if dist_ht is not None:
            self.dist_ht = dist_ht
        if fcc is not None:
            self.fcc = fcc
        if gas_ht is not None:
            self.gas_ht = gas_ht
        if goht is not None:
            self.goht = goht
        if hydrk is not None:
            self.hydrk = hydrk
        if hydrk_rsd is not None:
            self.hydrk_rsd = hydrk_rsd
        if kero_ht is not None:
            self.kero_ht = kero_ht
        if lubes is not None:
            self.lubes = lubes
        if naph_ht is not None:
            self.naph_ht = naph_ht
        if reformer is not None:
            self.reformer = reformer

    @property
    def purchase_vgo(self):
        """Gets the purchase_vgo of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The purchase_vgo of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: float
        """
        return self._purchase_vgo

    @purchase_vgo.setter
    def purchase_vgo(self, purchase_vgo):
        """Sets the purchase_vgo of this TimeseriesAdvancedOptions.


        :param purchase_vgo: The purchase_vgo of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: float
        """

        self._purchase_vgo = purchase_vgo

    @property
    def reid_vapor_pressure(self):
        """Gets the reid_vapor_pressure of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The reid_vapor_pressure of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: float
        """
        return self._reid_vapor_pressure

    @reid_vapor_pressure.setter
    def reid_vapor_pressure(self, reid_vapor_pressure):
        """Sets the reid_vapor_pressure of this TimeseriesAdvancedOptions.


        :param reid_vapor_pressure: The reid_vapor_pressure of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: float
        """

        self._reid_vapor_pressure = reid_vapor_pressure

    @property
    def carbon_penalty(self):
        """Gets the carbon_penalty of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The carbon_penalty of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: float
        """
        return self._carbon_penalty

    @carbon_penalty.setter
    def carbon_penalty(self, carbon_penalty):
        """Sets the carbon_penalty of this TimeseriesAdvancedOptions.


        :param carbon_penalty: The carbon_penalty of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: float
        """

        self._carbon_penalty = carbon_penalty

    @property
    def blue_h2_percentage(self):
        """Gets the blue_h2_percentage of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The blue_h2_percentage of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: float
        """
        return self._blue_h2_percentage

    @blue_h2_percentage.setter
    def blue_h2_percentage(self, blue_h2_percentage):
        """Sets the blue_h2_percentage of this TimeseriesAdvancedOptions.


        :param blue_h2_percentage: The blue_h2_percentage of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: float
        """

        self._blue_h2_percentage = blue_h2_percentage

    @property
    def blue_h2_price(self):
        """Gets the blue_h2_price of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The blue_h2_price of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: float
        """
        return self._blue_h2_price

    @blue_h2_price.setter
    def blue_h2_price(self, blue_h2_price):
        """Sets the blue_h2_price of this TimeseriesAdvancedOptions.


        :param blue_h2_price: The blue_h2_price of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: float
        """

        self._blue_h2_price = blue_h2_price

    @property
    def green_h2_percentage(self):
        """Gets the green_h2_percentage of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The green_h2_percentage of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: float
        """
        return self._green_h2_percentage

    @green_h2_percentage.setter
    def green_h2_percentage(self, green_h2_percentage):
        """Sets the green_h2_percentage of this TimeseriesAdvancedOptions.


        :param green_h2_percentage: The green_h2_percentage of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: float
        """

        self._green_h2_percentage = green_h2_percentage

    @property
    def green_h2_price(self):
        """Gets the green_h2_price of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The green_h2_price of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: float
        """
        return self._green_h2_price

    @green_h2_price.setter
    def green_h2_price(self, green_h2_price):
        """Sets the green_h2_price of this TimeseriesAdvancedOptions.


        :param green_h2_price: The green_h2_price of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: float
        """

        self._green_h2_price = green_h2_price

    @property
    def grey_h2_percentage(self):
        """Gets the grey_h2_percentage of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The grey_h2_percentage of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: float
        """
        return self._grey_h2_percentage

    @grey_h2_percentage.setter
    def grey_h2_percentage(self, grey_h2_percentage):
        """Sets the grey_h2_percentage of this TimeseriesAdvancedOptions.


        :param grey_h2_percentage: The grey_h2_percentage of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: float
        """

        self._grey_h2_percentage = grey_h2_percentage

    @property
    def grey_h2_price(self):
        """Gets the grey_h2_price of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The grey_h2_price of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: float
        """
        return self._grey_h2_price

    @grey_h2_price.setter
    def grey_h2_price(self, grey_h2_price):
        """Sets the grey_h2_price of this TimeseriesAdvancedOptions.


        :param grey_h2_price: The grey_h2_price of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: float
        """

        self._grey_h2_price = grey_h2_price

    @property
    def dist_ht(self):
        """Gets the dist_ht of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The dist_ht of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._dist_ht

    @dist_ht.setter
    def dist_ht(self, dist_ht):
        """Sets the dist_ht of this TimeseriesAdvancedOptions.


        :param dist_ht: The dist_ht of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._dist_ht = dist_ht

    @property
    def fcc(self):
        """Gets the fcc of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The fcc of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._fcc

    @fcc.setter
    def fcc(self, fcc):
        """Sets the fcc of this TimeseriesAdvancedOptions.


        :param fcc: The fcc of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._fcc = fcc

    @property
    def gas_ht(self):
        """Gets the gas_ht of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The gas_ht of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._gas_ht

    @gas_ht.setter
    def gas_ht(self, gas_ht):
        """Sets the gas_ht of this TimeseriesAdvancedOptions.


        :param gas_ht: The gas_ht of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._gas_ht = gas_ht

    @property
    def goht(self):
        """Gets the goht of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The goht of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._goht

    @goht.setter
    def goht(self, goht):
        """Sets the goht of this TimeseriesAdvancedOptions.


        :param goht: The goht of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._goht = goht

    @property
    def hydrk(self):
        """Gets the hydrk of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The hydrk of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._hydrk

    @hydrk.setter
    def hydrk(self, hydrk):
        """Sets the hydrk of this TimeseriesAdvancedOptions.


        :param hydrk: The hydrk of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._hydrk = hydrk

    @property
    def hydrk_rsd(self):
        """Gets the hydrk_rsd of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The hydrk_rsd of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._hydrk_rsd

    @hydrk_rsd.setter
    def hydrk_rsd(self, hydrk_rsd):
        """Sets the hydrk_rsd of this TimeseriesAdvancedOptions.


        :param hydrk_rsd: The hydrk_rsd of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._hydrk_rsd = hydrk_rsd

    @property
    def kero_ht(self):
        """Gets the kero_ht of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The kero_ht of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._kero_ht

    @kero_ht.setter
    def kero_ht(self, kero_ht):
        """Sets the kero_ht of this TimeseriesAdvancedOptions.


        :param kero_ht: The kero_ht of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._kero_ht = kero_ht

    @property
    def lubes(self):
        """Gets the lubes of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The lubes of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._lubes

    @lubes.setter
    def lubes(self, lubes):
        """Sets the lubes of this TimeseriesAdvancedOptions.


        :param lubes: The lubes of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._lubes = lubes

    @property
    def naph_ht(self):
        """Gets the naph_ht of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The naph_ht of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._naph_ht

    @naph_ht.setter
    def naph_ht(self, naph_ht):
        """Sets the naph_ht of this TimeseriesAdvancedOptions.


        :param naph_ht: The naph_ht of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._naph_ht = naph_ht

    @property
    def reformer(self):
        """Gets the reformer of this TimeseriesAdvancedOptions.  # noqa: E501


        :return: The reformer of this TimeseriesAdvancedOptions.  # noqa: E501
        :rtype: HealthState
        """
        return self._reformer

    @reformer.setter
    def reformer(self, reformer):
        """Sets the reformer of this TimeseriesAdvancedOptions.


        :param reformer: The reformer of this TimeseriesAdvancedOptions.  # noqa: E501
        :type: HealthState
        """

        self._reformer = reformer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeseriesAdvancedOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeseriesAdvancedOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
