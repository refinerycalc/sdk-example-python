# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimulationJobOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cron_schedule': 'str',
        'cron_time_zone': 'str',
        'run_immediately': 'bool',
        'schedule_id': 'int',
        'calculator_id': 'int',
        'name': 'str'
    }

    attribute_map = {
        'cron_schedule': 'cronSchedule',
        'cron_time_zone': 'cronTimeZone',
        'run_immediately': 'runImmediately',
        'schedule_id': 'scheduleId',
        'calculator_id': 'calculatorId',
        'name': 'name'
    }

    def __init__(self, cron_schedule=None, cron_time_zone=None, run_immediately=None, schedule_id=None, calculator_id=None, name=None):  # noqa: E501
        """SimulationJobOptions - a model defined in Swagger"""  # noqa: E501
        self._cron_schedule = None
        self._cron_time_zone = None
        self._run_immediately = None
        self._schedule_id = None
        self._calculator_id = None
        self._name = None
        self.discriminator = None
        if cron_schedule is not None:
            self.cron_schedule = cron_schedule
        if cron_time_zone is not None:
            self.cron_time_zone = cron_time_zone
        if run_immediately is not None:
            self.run_immediately = run_immediately
        if schedule_id is not None:
            self.schedule_id = schedule_id
        if calculator_id is not None:
            self.calculator_id = calculator_id
        if name is not None:
            self.name = name

    @property
    def cron_schedule(self):
        """Gets the cron_schedule of this SimulationJobOptions.  # noqa: E501


        :return: The cron_schedule of this SimulationJobOptions.  # noqa: E501
        :rtype: str
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """Sets the cron_schedule of this SimulationJobOptions.


        :param cron_schedule: The cron_schedule of this SimulationJobOptions.  # noqa: E501
        :type: str
        """

        self._cron_schedule = cron_schedule

    @property
    def cron_time_zone(self):
        """Gets the cron_time_zone of this SimulationJobOptions.  # noqa: E501


        :return: The cron_time_zone of this SimulationJobOptions.  # noqa: E501
        :rtype: str
        """
        return self._cron_time_zone

    @cron_time_zone.setter
    def cron_time_zone(self, cron_time_zone):
        """Sets the cron_time_zone of this SimulationJobOptions.


        :param cron_time_zone: The cron_time_zone of this SimulationJobOptions.  # noqa: E501
        :type: str
        """

        self._cron_time_zone = cron_time_zone

    @property
    def run_immediately(self):
        """Gets the run_immediately of this SimulationJobOptions.  # noqa: E501


        :return: The run_immediately of this SimulationJobOptions.  # noqa: E501
        :rtype: bool
        """
        return self._run_immediately

    @run_immediately.setter
    def run_immediately(self, run_immediately):
        """Sets the run_immediately of this SimulationJobOptions.


        :param run_immediately: The run_immediately of this SimulationJobOptions.  # noqa: E501
        :type: bool
        """

        self._run_immediately = run_immediately

    @property
    def schedule_id(self):
        """Gets the schedule_id of this SimulationJobOptions.  # noqa: E501


        :return: The schedule_id of this SimulationJobOptions.  # noqa: E501
        :rtype: int
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this SimulationJobOptions.


        :param schedule_id: The schedule_id of this SimulationJobOptions.  # noqa: E501
        :type: int
        """

        self._schedule_id = schedule_id

    @property
    def calculator_id(self):
        """Gets the calculator_id of this SimulationJobOptions.  # noqa: E501


        :return: The calculator_id of this SimulationJobOptions.  # noqa: E501
        :rtype: int
        """
        return self._calculator_id

    @calculator_id.setter
    def calculator_id(self, calculator_id):
        """Sets the calculator_id of this SimulationJobOptions.


        :param calculator_id: The calculator_id of this SimulationJobOptions.  # noqa: E501
        :type: int
        """

        self._calculator_id = calculator_id

    @property
    def name(self):
        """Gets the name of this SimulationJobOptions.  # noqa: E501


        :return: The name of this SimulationJobOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimulationJobOptions.


        :param name: The name of this SimulationJobOptions.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimulationJobOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimulationJobOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
